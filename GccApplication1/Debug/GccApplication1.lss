
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000147a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000172  00800060  0000147a  0000150e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  008001d2  008001d2  00001680  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001680  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000016ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002381  00000000  00000000  0000176c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000070e  00000000  00000000  00003aed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001166  00000000  00000000  000041fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000018c  00000000  00000000  00005364  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000413  00000000  00000000  000054f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013a6  00000000  00000000  00005903  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00006ca9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e7       	ldi	r30, 0x7A	; 122
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 3d       	cpi	r26, 0xD2	; 210
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a2 ed       	ldi	r26, 0xD2	; 210
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3f       	cpi	r26, 0xF3	; 243
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <main>
      8a:	0c 94 3b 0a 	jmp	0x1476	; 0x1476 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <check4>:
	
}

void check4(void)
{
	pad =0b11110111;
      92:	87 ef       	ldi	r24, 0xF7	; 247
      94:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      96:	81 e2       	ldi	r24, 0x21	; 33
      98:	8a 95       	dec	r24
      9a:	f1 f7       	brne	.-4      	; 0x98 <check4+0x6>
      9c:	00 00       	nop
	_delay_us(100);
	
	char chr1=PIND;
      9e:	80 b3       	in	r24, 0x10	; 16
	if(chr1==0b10110111)
      a0:	87 3b       	cpi	r24, 0xB7	; 183
      a2:	21 f4       	brne	.+8      	; 0xac <check4+0x1a>
	{
		mode='#';
      a4:	83 e2       	ldi	r24, 0x23	; 35
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
      aa:	08 95       	ret
	}
	else if(chr1==0b11100111)
      ac:	87 3e       	cpi	r24, 0xE7	; 231
      ae:	19 f4       	brne	.+6      	; 0xb6 <check4+0x24>
	{
		mode='*';
      b0:	8a e2       	ldi	r24, 0x2A	; 42
      b2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
      b6:	08 95       	ret

000000b8 <LCD_cmd>:
	return;
}

void LCD_cmd(unsigned char cmd)
{
	LCD_DATA=cmd;
      b8:	8b bb       	out	0x1b, r24	; 27
	ctrl =(0<<rs)|(0<<rw)|(1<<en);
      ba:	84 e0       	ldi	r24, 0x04	; 4
      bc:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      be:	89 ef       	ldi	r24, 0xF9	; 249
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	01 97       	sbiw	r24, 0x01	; 1
      c4:	f1 f7       	brne	.-4      	; 0xc2 <LCD_cmd+0xa>
      c6:	00 c0       	rjmp	.+0      	; 0xc8 <LCD_cmd+0x10>
      c8:	00 00       	nop
	_delay_ms(1);
	ctrl =(0<<rs)|(0<<rw)|(0<<en);
      ca:	18 ba       	out	0x18, r1	; 24
      cc:	83 ec       	ldi	r24, 0xC3	; 195
      ce:	99 e0       	ldi	r25, 0x09	; 9
      d0:	01 97       	sbiw	r24, 0x01	; 1
      d2:	f1 f7       	brne	.-4      	; 0xd0 <LCD_cmd+0x18>
      d4:	00 c0       	rjmp	.+0      	; 0xd6 <LCD_cmd+0x1e>
      d6:	00 00       	nop
      d8:	08 95       	ret

000000da <init_LCD>:
}

void init_LCD(void)
{
	
	LCD_cmd(0x38);
      da:	88 e3       	ldi	r24, 0x38	; 56
      dc:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
      e0:	89 ef       	ldi	r24, 0xF9	; 249
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	01 97       	sbiw	r24, 0x01	; 1
      e6:	f1 f7       	brne	.-4      	; 0xe4 <init_LCD+0xa>
      e8:	00 c0       	rjmp	.+0      	; 0xea <init_LCD+0x10>
      ea:	00 00       	nop
	_delay_ms(1);
	
	LCD_cmd(0x01);
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
      f2:	89 ef       	ldi	r24, 0xF9	; 249
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	01 97       	sbiw	r24, 0x01	; 1
      f8:	f1 f7       	brne	.-4      	; 0xf6 <init_LCD+0x1c>
      fa:	00 c0       	rjmp	.+0      	; 0xfc <init_LCD+0x22>
      fc:	00 00       	nop
	_delay_ms(1);
	
	LCD_cmd(0x0E);
      fe:	8e e0       	ldi	r24, 0x0E	; 14
     100:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
     104:	89 ef       	ldi	r24, 0xF9	; 249
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	01 97       	sbiw	r24, 0x01	; 1
     10a:	f1 f7       	brne	.-4      	; 0x108 <init_LCD+0x2e>
     10c:	00 c0       	rjmp	.+0      	; 0x10e <init_LCD+0x34>
     10e:	00 00       	nop
	_delay_ms(1);
	
	LCD_cmd(0x80);
     110:	80 e8       	ldi	r24, 0x80	; 128
     112:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
     116:	89 ef       	ldi	r24, 0xF9	; 249
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	01 97       	sbiw	r24, 0x01	; 1
     11c:	f1 f7       	brne	.-4      	; 0x11a <init_LCD+0x40>
     11e:	00 c0       	rjmp	.+0      	; 0x120 <init_LCD+0x46>
     120:	00 00       	nop
     122:	08 95       	ret

00000124 <LCD_write>:
	return;
}

void LCD_write(unsigned char data)
{
	LCD_DATA= data;
     124:	8b bb       	out	0x1b, r24	; 27
	ctrl = (1<<rs)|(0<<rw)|(1<<en);
     126:	85 e0       	ldi	r24, 0x05	; 5
     128:	88 bb       	out	0x18, r24	; 24
     12a:	83 ec       	ldi	r24, 0xC3	; 195
     12c:	99 e0       	ldi	r25, 0x09	; 9
     12e:	01 97       	sbiw	r24, 0x01	; 1
     130:	f1 f7       	brne	.-4      	; 0x12e <LCD_write+0xa>
     132:	00 c0       	rjmp	.+0      	; 0x134 <LCD_write+0x10>
     134:	00 00       	nop
	_delay_ms(10);
	ctrl = (1<<rs)|(0<<rw)|(0<<en);
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	88 bb       	out	0x18, r24	; 24
     13a:	83 ec       	ldi	r24, 0xC3	; 195
     13c:	99 e0       	ldi	r25, 0x09	; 9
     13e:	01 97       	sbiw	r24, 0x01	; 1
     140:	f1 f7       	brne	.-4      	; 0x13e <LCD_write+0x1a>
     142:	00 c0       	rjmp	.+0      	; 0x144 <LCD_write+0x20>
     144:	00 00       	nop
     146:	08 95       	ret

00000148 <LCD_write_string>:
	_delay_ms(10);
	return ;
}

void LCD_write_string(unsigned char *str)
{
     148:	cf 93       	push	r28
     14a:	df 93       	push	r29
     14c:	ec 01       	movw	r28, r24
	int i=0;
	while(str[i]!='\0')
     14e:	88 81       	ld	r24, Y
     150:	88 23       	and	r24, r24
     152:	31 f0       	breq	.+12     	; 0x160 <LCD_write_string+0x18>
     154:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_write(str[i]);
     156:	0e 94 92 00 	call	0x124	; 0x124 <LCD_write>
}

void LCD_write_string(unsigned char *str)
{
	int i=0;
	while(str[i]!='\0')
     15a:	89 91       	ld	r24, Y+
     15c:	81 11       	cpse	r24, r1
     15e:	fb cf       	rjmp	.-10     	; 0x156 <LCD_write_string+0xe>
	{
		LCD_write(str[i]);
		i++;
	}
	return;
}
     160:	df 91       	pop	r29
     162:	cf 91       	pop	r28
     164:	08 95       	ret

00000166 <printData>:
char mode='0';
int count1=0;


void printData()
{
     166:	af 92       	push	r10
     168:	bf 92       	push	r11
     16a:	cf 92       	push	r12
     16c:	df 92       	push	r13
     16e:	ef 92       	push	r14
     170:	ff 92       	push	r15
     172:	0f 93       	push	r16
     174:	1f 93       	push	r17
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
     17a:	0f 2e       	mov	r0, r31
     17c:	f1 e6       	ldi	r31, 0x61	; 97
     17e:	af 2e       	mov	r10, r31
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	bf 2e       	mov	r11, r31
     184:	f0 2d       	mov	r31, r0
     186:	0f 2e       	mov	r0, r31
     188:	f6 ed       	ldi	r31, 0xD6	; 214
     18a:	cf 2e       	mov	r12, r31
     18c:	f1 e0       	ldi	r31, 0x01	; 1
     18e:	df 2e       	mov	r13, r31
     190:	f0 2d       	mov	r31, r0
	for(int i=0;i<3;i++)
     192:	e1 2c       	mov	r14, r1
     194:	f1 2c       	mov	r15, r1
	{
		LCD_cmd(commands[i]);
     196:	f5 01       	movw	r30, r10
     198:	81 91       	ld	r24, Z+
     19a:	5f 01       	movw	r10, r30
     19c:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
		if(i==0 || i==1)
     1a0:	f2 e0       	ldi	r31, 0x02	; 2
     1a2:	ef 16       	cp	r14, r31
     1a4:	f1 04       	cpc	r15, r1
     1a6:	28 f4       	brcc	.+10     	; 0x1b2 <printData+0x4c>
		{
			LCD_write_string("      ");
     1a8:	83 e2       	ldi	r24, 0x23	; 35
     1aa:	91 e0       	ldi	r25, 0x01	; 1
     1ac:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
     1b0:	20 c0       	rjmp	.+64     	; 0x1f2 <printData+0x8c>
		}
		else
		{
			LCD_write_string("  ");
     1b2:	87 e2       	ldi	r24, 0x27	; 39
     1b4:	91 e0       	ldi	r25, 0x01	; 1
     1b6:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
     1ba:	1b c0       	rjmp	.+54     	; 0x1f2 <printData+0x8c>
		}
		for(int j=0;j<3;j++)
		{
			LCD_write(arr1[i][j]);
     1bc:	f8 01       	movw	r30, r16
     1be:	81 91       	ld	r24, Z+
     1c0:	8f 01       	movw	r16, r30
     1c2:	0e 94 92 00 	call	0x124	; 0x124 <LCD_write>
			LCD_write(' ');
     1c6:	80 e2       	ldi	r24, 0x20	; 32
     1c8:	0e 94 92 00 	call	0x124	; 0x124 <LCD_write>
		}
		else
		{
			LCD_write_string("  ");
		}
		for(int j=0;j<3;j++)
     1cc:	21 96       	adiw	r28, 0x01	; 1
     1ce:	c3 30       	cpi	r28, 0x03	; 3
     1d0:	d1 05       	cpc	r29, r1
     1d2:	a1 f7       	brne	.-24     	; 0x1bc <printData+0x56>
		{
			LCD_write(arr1[i][j]);
			LCD_write(' ');
		}
		LCD_write_string("\n");
     1d4:	84 e6       	ldi	r24, 0x64	; 100
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
int count1=0;


void printData()
{
	for(int i=0;i<3;i++)
     1dc:	ff ef       	ldi	r31, 0xFF	; 255
     1de:	ef 1a       	sub	r14, r31
     1e0:	ff 0a       	sbc	r15, r31
     1e2:	83 e0       	ldi	r24, 0x03	; 3
     1e4:	c8 0e       	add	r12, r24
     1e6:	d1 1c       	adc	r13, r1
     1e8:	e3 e0       	ldi	r30, 0x03	; 3
     1ea:	ee 16       	cp	r14, r30
     1ec:	f1 04       	cpc	r15, r1
     1ee:	99 f6       	brne	.-90     	; 0x196 <printData+0x30>
     1f0:	04 c0       	rjmp	.+8      	; 0x1fa <printData+0x94>
     1f2:	86 01       	movw	r16, r12
     1f4:	c0 e0       	ldi	r28, 0x00	; 0
     1f6:	d0 e0       	ldi	r29, 0x00	; 0
     1f8:	e1 cf       	rjmp	.-62     	; 0x1bc <printData+0x56>
			LCD_write(' ');
		}
		LCD_write_string("\n");
	}
	
}
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	1f 91       	pop	r17
     200:	0f 91       	pop	r16
     202:	ff 90       	pop	r15
     204:	ef 90       	pop	r14
     206:	df 90       	pop	r13
     208:	cf 90       	pop	r12
     20a:	bf 90       	pop	r11
     20c:	af 90       	pop	r10
     20e:	08 95       	ret

00000210 <check1>:


void check1(void)
{
	
	pad =0b11111110;
     210:	8e ef       	ldi	r24, 0xFE	; 254
     212:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     214:	81 e2       	ldi	r24, 0x21	; 33
     216:	8a 95       	dec	r24
     218:	f1 f7       	brne	.-4      	; 0x216 <check1+0x6>
     21a:	00 00       	nop
	
	_delay_us(100);
	char chr1=PIND;
     21c:	80 b3       	in	r24, 0x10	; 16
	if(chr1==0b10111110)
     21e:	8e 3b       	cpi	r24, 0xBE	; 190
     220:	99 f5       	brne	.+102    	; 0x288 <check1+0x78>
	{
		if(arr2[0][2]==2)
     222:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <arr2+0x4>
     226:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <arr2+0x5>
     22a:	02 97       	sbiw	r24, 0x02	; 2
     22c:	f1 f4       	brne	.+60     	; 0x26a <check1+0x5a>
		{
			arr1[0][2]='X';
     22e:	88 e5       	ldi	r24, 0x58	; 88
     230:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <arr1+0x2>
			arr2[0][2]=5;
     234:	85 e0       	ldi	r24, 0x05	; 5
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <arr2+0x5>
     23c:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <arr2+0x4>
			change=1;
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <change+0x1>
     248:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <change>
			LCD_cmd(0xD4);
     24c:	84 ed       	ldi	r24, 0xD4	; 212
     24e:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("...................");
     252:	86 e6       	ldi	r24, 0x66	; 102
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
			LCD_cmd(0xD4);
     25a:	84 ed       	ldi	r24, 0xD4	; 212
     25c:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("ADDED..............");
     260:	8a e7       	ldi	r24, 0x7A	; 122
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
     268:	08 95       	ret
		}
		else
		{
			LCD_cmd(0xD4);
     26a:	84 ed       	ldi	r24, 0xD4	; 212
     26c:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("...................");
     270:	86 e6       	ldi	r24, 0x66	; 102
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
			LCD_cmd(0xD4);
     278:	84 ed       	ldi	r24, 0xD4	; 212
     27a:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("ALREADY TAKEN");
     27e:	8e e8       	ldi	r24, 0x8E	; 142
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
     286:	08 95       	ret
		}
	}
	else if(chr1==0b11011110)
     288:	8e 3d       	cpi	r24, 0xDE	; 222
     28a:	99 f5       	brne	.+102    	; 0x2f2 <check1+0xe2>
	{
		if(arr2[0][1]==2)
     28c:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <arr2+0x2>
     290:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <arr2+0x3>
     294:	02 97       	sbiw	r24, 0x02	; 2
     296:	f1 f4       	brne	.+60     	; 0x2d4 <check1+0xc4>
		{
			arr1[0][1]='X';
     298:	88 e5       	ldi	r24, 0x58	; 88
     29a:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <arr1+0x1>
			arr2[0][1]=5;
     29e:	85 e0       	ldi	r24, 0x05	; 5
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <arr2+0x3>
     2a6:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <arr2+0x2>
			change=1;
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <change+0x1>
     2b2:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <change>
			LCD_cmd(0xD4);
     2b6:	84 ed       	ldi	r24, 0xD4	; 212
     2b8:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("...................");
     2bc:	86 e6       	ldi	r24, 0x66	; 102
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
			LCD_cmd(0xD4);
     2c4:	84 ed       	ldi	r24, 0xD4	; 212
     2c6:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("ADDED..............");
     2ca:	8a e7       	ldi	r24, 0x7A	; 122
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
     2d2:	08 95       	ret
		}
		else
		{
			LCD_cmd(0xD4);
     2d4:	84 ed       	ldi	r24, 0xD4	; 212
     2d6:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("...................");
     2da:	86 e6       	ldi	r24, 0x66	; 102
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
			LCD_cmd(0xD4);
     2e2:	84 ed       	ldi	r24, 0xD4	; 212
     2e4:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("ALREADY TAKEN");
     2e8:	8e e8       	ldi	r24, 0x8E	; 142
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
     2f0:	08 95       	ret
		}
	}
	else if(chr1==0b11101110)
     2f2:	8e 3e       	cpi	r24, 0xEE	; 238
     2f4:	91 f5       	brne	.+100    	; 0x35a <check1+0x14a>
	{
		if(arr2[0][0]==2)
     2f6:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <arr2>
     2fa:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <arr2+0x1>
     2fe:	02 97       	sbiw	r24, 0x02	; 2
     300:	f1 f4       	brne	.+60     	; 0x33e <check1+0x12e>
		{
			arr1[0][0]='X';
     302:	88 e5       	ldi	r24, 0x58	; 88
     304:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <arr1>
			arr2[0][0]=5;
     308:	85 e0       	ldi	r24, 0x05	; 5
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <arr2+0x1>
     310:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <arr2>
			change=1;
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <change+0x1>
     31c:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <change>
			LCD_cmd(0xD4);
     320:	84 ed       	ldi	r24, 0xD4	; 212
     322:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("...................");
     326:	86 e6       	ldi	r24, 0x66	; 102
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
			LCD_cmd(0xD4);
     32e:	84 ed       	ldi	r24, 0xD4	; 212
     330:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("ADDED..............");
     334:	8a e7       	ldi	r24, 0x7A	; 122
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
     33c:	08 95       	ret
		}
		else
		{
			LCD_cmd(0xD4);
     33e:	84 ed       	ldi	r24, 0xD4	; 212
     340:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("...................");
     344:	86 e6       	ldi	r24, 0x66	; 102
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
			LCD_cmd(0xD4);
     34c:	84 ed       	ldi	r24, 0xD4	; 212
     34e:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("ALREADY TAKEN");
     352:	8e e8       	ldi	r24, 0x8E	; 142
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
     35a:	08 95       	ret

0000035c <check2>:
	
}

void check2(void)
{
	pad=0b11111101;
     35c:	8d ef       	ldi	r24, 0xFD	; 253
     35e:	82 bb       	out	0x12, r24	; 18
     360:	81 e2       	ldi	r24, 0x21	; 33
     362:	8a 95       	dec	r24
     364:	f1 f7       	brne	.-4      	; 0x362 <check2+0x6>
     366:	00 00       	nop
	_delay_us(100);
	char chr1=PIND;
     368:	80 b3       	in	r24, 0x10	; 16
	if(chr1==0b10111101)
     36a:	8d 3b       	cpi	r24, 0xBD	; 189
     36c:	99 f5       	brne	.+102    	; 0x3d4 <check2+0x78>
	{
		if(arr2[1][2]==2)
     36e:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <arr2+0xa>
     372:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <arr2+0xb>
     376:	02 97       	sbiw	r24, 0x02	; 2
     378:	f1 f4       	brne	.+60     	; 0x3b6 <check2+0x5a>
		{
			arr1[1][2]='X';
     37a:	88 e5       	ldi	r24, 0x58	; 88
     37c:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <arr1+0x5>
			arr2[1][2]=5;
     380:	85 e0       	ldi	r24, 0x05	; 5
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <arr2+0xb>
     388:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <arr2+0xa>
			change=1;
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <change+0x1>
     394:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <change>
			LCD_cmd(0xD4);
     398:	84 ed       	ldi	r24, 0xD4	; 212
     39a:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("...................");
     39e:	86 e6       	ldi	r24, 0x66	; 102
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
			LCD_cmd(0xD4);
     3a6:	84 ed       	ldi	r24, 0xD4	; 212
     3a8:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("ADDED..............");
     3ac:	8a e7       	ldi	r24, 0x7A	; 122
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
     3b4:	08 95       	ret
		}
		else
		{
			LCD_cmd(0xD4);
     3b6:	84 ed       	ldi	r24, 0xD4	; 212
     3b8:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("...................");
     3bc:	86 e6       	ldi	r24, 0x66	; 102
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
			LCD_cmd(0xD4);
     3c4:	84 ed       	ldi	r24, 0xD4	; 212
     3c6:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("ALREADY TAKEN");
     3ca:	8e e8       	ldi	r24, 0x8E	; 142
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
     3d2:	08 95       	ret
		}
	}
	else if(chr1==0b11011101)
     3d4:	8d 3d       	cpi	r24, 0xDD	; 221
     3d6:	b1 f5       	brne	.+108    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
	{
		if(arr2[1][1]==2)
     3d8:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <arr2+0x8>
     3dc:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <arr2+0x9>
     3e0:	02 97       	sbiw	r24, 0x02	; 2
     3e2:	09 f5       	brne	.+66     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		{
			arr1[1][1]='X';
     3e4:	88 e5       	ldi	r24, 0x58	; 88
     3e6:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <arr1+0x4>
			arr2[1][1]=5;
     3ea:	85 e0       	ldi	r24, 0x05	; 5
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <arr2+0x9>
     3f2:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <arr2+0x8>
			LCD_cmd(0xD4);
     3f6:	84 ed       	ldi	r24, 0xD4	; 212
     3f8:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			change=1;
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <change+0x1>
     404:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <change>
			LCD_write_string("...................");
     408:	86 e6       	ldi	r24, 0x66	; 102
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
			LCD_cmd(0xD4);
     410:	84 ed       	ldi	r24, 0xD4	; 212
     412:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("ADDED..............");
     416:	8a e7       	ldi	r24, 0x7A	; 122
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
			LCD_cmd(0xD4);
     41e:	84 ed       	ldi	r24, 0xD4	; 212
     420:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
     424:	08 95       	ret
		}
		else
		{
			LCD_cmd(0xD4);
     426:	84 ed       	ldi	r24, 0xD4	; 212
     428:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("...................");
     42c:	86 e6       	ldi	r24, 0x66	; 102
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
			LCD_cmd(0xD4);
     434:	84 ed       	ldi	r24, 0xD4	; 212
     436:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("ALREADY TAKEN");
     43a:	8e e8       	ldi	r24, 0x8E	; 142
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
     442:	08 95       	ret
		}
	}
	else if(chr1==0b11101101)
     444:	8d 3e       	cpi	r24, 0xED	; 237
     446:	91 f5       	brne	.+100    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
	{
		if(arr2[1][0]==2)
     448:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <arr2+0x6>
     44c:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <arr2+0x7>
     450:	02 97       	sbiw	r24, 0x02	; 2
     452:	f1 f4       	brne	.+60     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
		{
			arr1[1][0]='X';
     454:	88 e5       	ldi	r24, 0x58	; 88
     456:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <arr1+0x3>
			arr2[1][0]=5;
     45a:	85 e0       	ldi	r24, 0x05	; 5
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <arr2+0x7>
     462:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <arr2+0x6>
			LCD_cmd(0xD4);
     466:	84 ed       	ldi	r24, 0xD4	; 212
     468:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			change=1;
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <change+0x1>
     474:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <change>
			LCD_write_string("...................");
     478:	86 e6       	ldi	r24, 0x66	; 102
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
			LCD_cmd(0xD4);
     480:	84 ed       	ldi	r24, 0xD4	; 212
     482:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("ADDED..............");
     486:	8a e7       	ldi	r24, 0x7A	; 122
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
     48e:	08 95       	ret
		}
		else
		{
			LCD_cmd(0xD4);
     490:	84 ed       	ldi	r24, 0xD4	; 212
     492:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("...................");
     496:	86 e6       	ldi	r24, 0x66	; 102
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
			LCD_cmd(0xD4);
     49e:	84 ed       	ldi	r24, 0xD4	; 212
     4a0:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("ALREADY TAKEN");
     4a4:	8e e8       	ldi	r24, 0x8E	; 142
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
     4ac:	08 95       	ret

000004ae <check3>:
	
}

void check3(void)
{
	pad=0b11111011;
     4ae:	8b ef       	ldi	r24, 0xFB	; 251
     4b0:	82 bb       	out	0x12, r24	; 18
     4b2:	81 e2       	ldi	r24, 0x21	; 33
     4b4:	8a 95       	dec	r24
     4b6:	f1 f7       	brne	.-4      	; 0x4b4 <check3+0x6>
     4b8:	00 00       	nop
	_delay_us(100);
	char chr1=PIND;
     4ba:	80 b3       	in	r24, 0x10	; 16
	if(chr1==0b10111011)
     4bc:	8b 3b       	cpi	r24, 0xBB	; 187
     4be:	99 f5       	brne	.+102    	; 0x526 <check3+0x78>
	{
		if(arr2[2][2]==2)
     4c0:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <arr2+0x10>
     4c4:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <arr2+0x11>
     4c8:	02 97       	sbiw	r24, 0x02	; 2
     4ca:	f1 f4       	brne	.+60     	; 0x508 <check3+0x5a>
		{
			arr1[2][2]='X';
     4cc:	88 e5       	ldi	r24, 0x58	; 88
     4ce:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <arr1+0x8>
			arr2[2][2]=5;
     4d2:	85 e0       	ldi	r24, 0x05	; 5
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <arr2+0x11>
     4da:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <arr2+0x10>
			LCD_cmd(0xD4);
     4de:	84 ed       	ldi	r24, 0xD4	; 212
     4e0:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			change=1;
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <change+0x1>
     4ec:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <change>
			LCD_write_string("...................");
     4f0:	86 e6       	ldi	r24, 0x66	; 102
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
			LCD_cmd(0xD4);
     4f8:	84 ed       	ldi	r24, 0xD4	; 212
     4fa:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("ADDED..............");
     4fe:	8a e7       	ldi	r24, 0x7A	; 122
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
     506:	08 95       	ret
		}
		else
		{
			LCD_cmd(0xD4);
     508:	84 ed       	ldi	r24, 0xD4	; 212
     50a:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("...................");
     50e:	86 e6       	ldi	r24, 0x66	; 102
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
			LCD_cmd(0xD4);
     516:	84 ed       	ldi	r24, 0xD4	; 212
     518:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("ALREADY TAKEN");
     51c:	8e e8       	ldi	r24, 0x8E	; 142
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
     524:	08 95       	ret
		}
	}
	else if(chr1==0b11011011)
     526:	8b 3d       	cpi	r24, 0xDB	; 219
     528:	99 f5       	brne	.+102    	; 0x590 <check3+0xe2>
	{
		if(arr2[2][1]==2)
     52a:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <arr2+0xe>
     52e:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <arr2+0xf>
     532:	02 97       	sbiw	r24, 0x02	; 2
     534:	f1 f4       	brne	.+60     	; 0x572 <check3+0xc4>
		{
			arr1[2][1]='X';
     536:	88 e5       	ldi	r24, 0x58	; 88
     538:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <arr1+0x7>
			arr2[2][1]=5;
     53c:	85 e0       	ldi	r24, 0x05	; 5
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	90 93 f0 01 	sts	0x01F0, r25	; 0x8001f0 <arr2+0xf>
     544:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <arr2+0xe>
			LCD_cmd(0xD4);
     548:	84 ed       	ldi	r24, 0xD4	; 212
     54a:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			change=1;
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <change+0x1>
     556:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <change>
			LCD_write_string("...................");
     55a:	86 e6       	ldi	r24, 0x66	; 102
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
			LCD_cmd(0xD4);
     562:	84 ed       	ldi	r24, 0xD4	; 212
     564:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("ADDED..............");
     568:	8a e7       	ldi	r24, 0x7A	; 122
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
     570:	08 95       	ret
		}
		else
		{
			LCD_cmd(0xD4);
     572:	84 ed       	ldi	r24, 0xD4	; 212
     574:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("...................");
     578:	86 e6       	ldi	r24, 0x66	; 102
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
			LCD_cmd(0xD4);
     580:	84 ed       	ldi	r24, 0xD4	; 212
     582:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("ALREADY TAKEN");
     586:	8e e8       	ldi	r24, 0x8E	; 142
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
     58e:	08 95       	ret
		}
	}
	else if(chr1==0b11101011)
     590:	8b 3e       	cpi	r24, 0xEB	; 235
     592:	91 f5       	brne	.+100    	; 0x5f8 <check3+0x14a>
	{
		if(arr2[2][0]==2)
     594:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <arr2+0xc>
     598:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <arr2+0xd>
     59c:	02 97       	sbiw	r24, 0x02	; 2
     59e:	f1 f4       	brne	.+60     	; 0x5dc <check3+0x12e>
		{
			arr1[2][0]='X';
     5a0:	88 e5       	ldi	r24, 0x58	; 88
     5a2:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <arr1+0x6>
			arr2[2][0]=5;
     5a6:	85 e0       	ldi	r24, 0x05	; 5
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <arr2+0xd>
     5ae:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <arr2+0xc>
			LCD_cmd(0xD4);
     5b2:	84 ed       	ldi	r24, 0xD4	; 212
     5b4:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			change=1;
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <change+0x1>
     5c0:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <change>
			LCD_write_string("...................");
     5c4:	86 e6       	ldi	r24, 0x66	; 102
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
			LCD_cmd(0xD4);
     5cc:	84 ed       	ldi	r24, 0xD4	; 212
     5ce:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("ADDED..............");
     5d2:	8a e7       	ldi	r24, 0x7A	; 122
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
     5da:	08 95       	ret
		}
		else
		{
			LCD_cmd(0xD4);
     5dc:	84 ed       	ldi	r24, 0xD4	; 212
     5de:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("...................");
     5e2:	86 e6       	ldi	r24, 0x66	; 102
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
			LCD_cmd(0xD4);
     5ea:	84 ed       	ldi	r24, 0xD4	; 212
     5ec:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("ALREADY TAKEN");
     5f0:	8e e8       	ldi	r24, 0x8E	; 142
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
     5f8:	08 95       	ret

000005fa <init>:
	}
	
}

void init()
{
     5fa:	cf 93       	push	r28
	init_LCD();
     5fc:	0e 94 6d 00 	call	0xda	; 0xda <init_LCD>
	LCD_cmd(0x80);
     600:	80 e8       	ldi	r24, 0x80	; 128
     602:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
	LCD_write_string("  SELECT LEVEL   ");
     606:	8c e9       	ldi	r24, 0x9C	; 156
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
	LCD_cmd(0xc0);
     60e:	80 ec       	ldi	r24, 0xC0	; 192
     610:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
	LCD_write_string(" *EASY    #HARD  ");
     614:	8e ea       	ldi	r24, 0xAE	; 174
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
	while(mode=='0')
	{
		PORTD=0xF0;
     61c:	c0 ef       	ldi	r28, 0xF0	; 240
	init_LCD();
	LCD_cmd(0x80);
	LCD_write_string("  SELECT LEVEL   ");
	LCD_cmd(0xc0);
	LCD_write_string(" *EASY    #HARD  ");
	while(mode=='0')
     61e:	10 c0       	rjmp	.+32     	; 0x640 <init+0x46>
	{
		PORTD=0xF0;
     620:	c2 bb       	out	0x12, r28	; 18
		char value1=PIND;
     622:	80 b3       	in	r24, 0x10	; 16
     624:	21 e2       	ldi	r18, 0x21	; 33
     626:	2a 95       	dec	r18
     628:	f1 f7       	brne	.-4      	; 0x626 <init+0x2c>
     62a:	00 00       	nop
		
		_delay_us(100);
		if(value1!=0xf0)
     62c:	80 3f       	cpi	r24, 0xF0	; 240
     62e:	41 f0       	breq	.+16     	; 0x640 <init+0x46>
		{
			check1();
     630:	0e 94 08 01 	call	0x210	; 0x210 <check1>
			check2();
     634:	0e 94 ae 01 	call	0x35c	; 0x35c <check2>
			check3();
     638:	0e 94 57 02 	call	0x4ae	; 0x4ae <check3>
			check4();
     63c:	0e 94 49 00 	call	0x92	; 0x92 <check4>
	init_LCD();
	LCD_cmd(0x80);
	LCD_write_string("  SELECT LEVEL   ");
	LCD_cmd(0xc0);
	LCD_write_string(" *EASY    #HARD  ");
	while(mode=='0')
     640:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     644:	80 33       	cpi	r24, 0x30	; 48
     646:	61 f3       	breq	.-40     	; 0x620 <init+0x26>
			check3();
			check4();
		}
	}
	
	if(mode=='*')
     648:	8a 32       	cpi	r24, 0x2A	; 42
     64a:	59 f4       	brne	.+22     	; 0x662 <init+0x68>
	{
		LCD_cmd(0xc0);
     64c:	80 ec       	ldi	r24, 0xC0	; 192
     64e:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
		LCD_write_string(" ");
     652:	88 e2       	ldi	r24, 0x28	; 40
     654:	91 e0       	ldi	r25, 0x01	; 1
     656:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
		LCD_write(255);
     65a:	8f ef       	ldi	r24, 0xFF	; 255
     65c:	0e 94 92 00 	call	0x124	; 0x124 <LCD_write>
     660:	0e c0       	rjmp	.+28     	; 0x67e <init+0x84>
	}
	else
	{
		LCD_cmd(0xc0);
     662:	80 ec       	ldi	r24, 0xC0	; 192
     664:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
		LCD_write_string(" *EASY    ");
     668:	80 ec       	ldi	r24, 0xC0	; 192
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
		LCD_write(255);
     670:	8f ef       	ldi	r24, 0xFF	; 255
     672:	0e 94 92 00 	call	0x124	; 0x124 <LCD_write>
		LCD_write_string("HARD");
     676:	8b ec       	ldi	r24, 0xCB	; 203
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     67e:	8f e7       	ldi	r24, 0x7F	; 127
     680:	9a e1       	ldi	r25, 0x1A	; 26
     682:	26 e0       	ldi	r18, 0x06	; 6
     684:	81 50       	subi	r24, 0x01	; 1
     686:	90 40       	sbci	r25, 0x00	; 0
     688:	20 40       	sbci	r18, 0x00	; 0
     68a:	e1 f7       	brne	.-8      	; 0x684 <init+0x8a>
     68c:	00 c0       	rjmp	.+0      	; 0x68e <init+0x94>
     68e:	00 00       	nop
	}
	_delay_ms(2000);
	mode='0';
     690:	80 e3       	ldi	r24, 0x30	; 48
     692:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	init_LCD();
     696:	0e 94 6d 00 	call	0xda	; 0xda <init_LCD>
	count1++;
     69a:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <__data_end>
     69e:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <__data_end+0x1>
     6a2:	01 96       	adiw	r24, 0x01	; 1
     6a4:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <__data_end+0x1>
     6a8:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <__data_end>
	for(int i=0;i<3;i++)
	{
		for(int j=0;j<3;j++)
		{
			arr2[i][j]=2;
     6ac:	e1 ee       	ldi	r30, 0xE1	; 225
     6ae:	f1 e0       	ldi	r31, 0x01	; 1
     6b0:	82 e0       	ldi	r24, 0x02	; 2
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	91 83       	std	Z+1, r25	; 0x01
     6b6:	80 83       	st	Z, r24
     6b8:	93 83       	std	Z+3, r25	; 0x03
     6ba:	82 83       	std	Z+2, r24	; 0x02
     6bc:	95 83       	std	Z+5, r25	; 0x05
     6be:	84 83       	std	Z+4, r24	; 0x04
     6c0:	97 83       	std	Z+7, r25	; 0x07
     6c2:	86 83       	std	Z+6, r24	; 0x06
     6c4:	91 87       	std	Z+9, r25	; 0x09
     6c6:	80 87       	std	Z+8, r24	; 0x08
     6c8:	93 87       	std	Z+11, r25	; 0x0b
     6ca:	82 87       	std	Z+10, r24	; 0x0a
     6cc:	95 87       	std	Z+13, r25	; 0x0d
     6ce:	84 87       	std	Z+12, r24	; 0x0c
     6d0:	97 87       	std	Z+15, r25	; 0x0f
     6d2:	86 87       	std	Z+14, r24	; 0x0e
     6d4:	91 8b       	std	Z+17, r25	; 0x11
     6d6:	80 8b       	std	Z+16, r24	; 0x10
     6d8:	46 ed       	ldi	r20, 0xD6	; 214
     6da:	51 e0       	ldi	r21, 0x01	; 1
     6dc:	6f ed       	ldi	r22, 0xDF	; 223
     6de:	71 e0       	ldi	r23, 0x01	; 1
	}
	for(int i=0;i<3;i++)
	{
		for(int j=0;j<7;j++)
		{
			arr1[i][j]=255;
     6e0:	2f ef       	ldi	r18, 0xFF	; 255
     6e2:	09 c0       	rjmp	.+18     	; 0x6f6 <init+0xfc>
     6e4:	21 93       	st	Z+, r18
			arr2[i][j]=2;
		}
	}
	for(int i=0;i<3;i++)
	{
		for(int j=0;j<7;j++)
     6e6:	e8 17       	cp	r30, r24
     6e8:	f9 07       	cpc	r31, r25
     6ea:	e1 f7       	brne	.-8      	; 0x6e4 <init+0xea>
     6ec:	4d 5f       	subi	r20, 0xFD	; 253
     6ee:	5f 4f       	sbci	r21, 0xFF	; 255
		for(int j=0;j<3;j++)
		{
			arr2[i][j]=2;
		}
	}
	for(int i=0;i<3;i++)
     6f0:	46 17       	cp	r20, r22
     6f2:	57 07       	cpc	r21, r23
     6f4:	21 f0       	breq	.+8      	; 0x6fe <init+0x104>
     6f6:	ca 01       	movw	r24, r20
     6f8:	07 96       	adiw	r24, 0x07	; 7
	}
	
}

void init()
{
     6fa:	fa 01       	movw	r30, r20
     6fc:	f3 cf       	rjmp	.-26     	; 0x6e4 <init+0xea>
		for(int j=0;j<7;j++)
		{
			arr1[i][j]=255;
		}
	}
	LCD_cmd(0x94);
     6fe:	84 e9       	ldi	r24, 0x94	; 148
     700:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
	LCD_write_string("                  ");
     704:	87 e1       	ldi	r24, 0x17	; 23
     706:	91 e0       	ldi	r25, 0x01	; 1
     708:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
	printData();
     70c:	0e 94 b3 00 	call	0x166	; 0x166 <printData>
	if(count1%2==0)
     710:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <__data_end>
     714:	80 fd       	sbrc	r24, 0
     716:	11 c0       	rjmp	.+34     	; 0x73a <init+0x140>
	{
		if(arr2[1][1]==2)
     718:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <arr2+0x8>
     71c:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <arr2+0x9>
     720:	02 97       	sbiw	r24, 0x02	; 2
     722:	59 f4       	brne	.+22     	; 0x73a <init+0x140>
		{
			arr1[1][1]='0';
     724:	80 e3       	ldi	r24, 0x30	; 48
     726:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <arr1+0x4>
			arr2[1][1]=3;
     72a:	83 e0       	ldi	r24, 0x03	; 3
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <arr2+0x9>
     732:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <arr2+0x8>
			printData();
     736:	0e 94 b3 00 	call	0x166	; 0x166 <printData>
		}
	}
	arr2[0][0]=2;
     73a:	82 e0       	ldi	r24, 0x02	; 2
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <arr2+0x1>
     742:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <arr2>
}
     746:	cf 91       	pop	r28
     748:	08 95       	ret

0000074a <matchDraw>:


void matchDraw()
{
	printData();
     74a:	0e 94 b3 00 	call	0x166	; 0x166 <printData>
     74e:	2f e3       	ldi	r18, 0x3F	; 63
     750:	8d e0       	ldi	r24, 0x0D	; 13
     752:	93 e0       	ldi	r25, 0x03	; 3
     754:	21 50       	subi	r18, 0x01	; 1
     756:	80 40       	sbci	r24, 0x00	; 0
     758:	90 40       	sbci	r25, 0x00	; 0
     75a:	e1 f7       	brne	.-8      	; 0x754 <matchDraw+0xa>
     75c:	00 c0       	rjmp	.+0      	; 0x75e <matchDraw+0x14>
     75e:	00 00       	nop
	_delay_ms(1000);
	LCD_cmd(0xD4);
     760:	84 ed       	ldi	r24, 0xD4	; 212
     762:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
	LCD_write_string("...................");
     766:	86 e6       	ldi	r24, 0x66	; 102
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
	LCD_cmd(0xD4);
     76e:	84 ed       	ldi	r24, 0xD4	; 212
     770:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
	LCD_write_string("OHH!...............");
     774:	80 ed       	ldi	r24, 0xD0	; 208
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
	
	LCD_cmd(0x80);
     77c:	80 e8       	ldi	r24, 0x80	; 128
     77e:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
	LCD_write_string("MATCH DRAW.............");
     782:	84 ee       	ldi	r24, 0xE4	; 228
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
	LCD_cmd(0xc0);
     78a:	80 ec       	ldi	r24, 0xC0	; 192
     78c:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
	LCD_write_string("new Match in 5s.....");
     790:	8c ef       	ldi	r24, 0xFC	; 252
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
	LCD_cmd(0x94);
     798:	84 e9       	ldi	r24, 0x94	; 148
     79a:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
	LCD_write_string("...............");
     79e:	84 ed       	ldi	r24, 0xD4	; 212
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
     7a6:	2f e3       	ldi	r18, 0x3F	; 63
     7a8:	82 e4       	ldi	r24, 0x42	; 66
     7aa:	9f e0       	ldi	r25, 0x0F	; 15
     7ac:	21 50       	subi	r18, 0x01	; 1
     7ae:	80 40       	sbci	r24, 0x00	; 0
     7b0:	90 40       	sbci	r25, 0x00	; 0
     7b2:	e1 f7       	brne	.-8      	; 0x7ac <matchDraw+0x62>
     7b4:	00 c0       	rjmp	.+0      	; 0x7b6 <matchDraw+0x6c>
     7b6:	00 00       	nop
	_delay_ms(5000);
	LCD_cmd(0x80);
     7b8:	80 e8       	ldi	r24, 0x80	; 128
     7ba:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
	LCD_write_string("                        ");
     7be:	81 e1       	ldi	r24, 0x11	; 17
     7c0:	91 e0       	ldi	r25, 0x01	; 1
     7c2:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
	LCD_cmd(0xc0);
     7c6:	80 ec       	ldi	r24, 0xC0	; 192
     7c8:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
	LCD_write_string("                        ");
     7cc:	81 e1       	ldi	r24, 0x11	; 17
     7ce:	91 e0       	ldi	r25, 0x01	; 1
     7d0:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
	init();
     7d4:	0e 94 fd 02 	call	0x5fa	; 0x5fa <init>
     7d8:	08 95       	ret

000007da <nextStep>:
}

void nextStep()
{
     7da:	2f 92       	push	r2
     7dc:	3f 92       	push	r3
     7de:	4f 92       	push	r4
     7e0:	5f 92       	push	r5
     7e2:	6f 92       	push	r6
     7e4:	7f 92       	push	r7
     7e6:	8f 92       	push	r8
     7e8:	9f 92       	push	r9
     7ea:	af 92       	push	r10
     7ec:	bf 92       	push	r11
     7ee:	cf 92       	push	r12
     7f0:	df 92       	push	r13
     7f2:	ef 92       	push	r14
     7f4:	ff 92       	push	r15
     7f6:	0f 93       	push	r16
     7f8:	1f 93       	push	r17
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
     7fe:	00 d0       	rcall	.+0      	; 0x800 <nextStep+0x26>
     800:	00 d0       	rcall	.+0      	; 0x802 <nextStep+0x28>
     802:	cd b7       	in	r28, 0x3d	; 61
     804:	de b7       	in	r29, 0x3e	; 62
	int r1=arr2[0][0]*arr2[0][1]*arr2[0][2];
     806:	e1 ee       	ldi	r30, 0xE1	; 225
     808:	f1 e0       	ldi	r31, 0x01	; 1
     80a:	20 81       	ld	r18, Z
     80c:	31 81       	ldd	r19, Z+1	; 0x01
     80e:	62 81       	ldd	r22, Z+2	; 0x02
     810:	73 81       	ldd	r23, Z+3	; 0x03
     812:	44 81       	ldd	r20, Z+4	; 0x04
     814:	55 81       	ldd	r21, Z+5	; 0x05
     816:	26 9f       	mul	r18, r22
     818:	c0 01       	movw	r24, r0
     81a:	27 9f       	mul	r18, r23
     81c:	90 0d       	add	r25, r0
     81e:	36 9f       	mul	r19, r22
     820:	90 0d       	add	r25, r0
     822:	11 24       	eor	r1, r1
     824:	84 9f       	mul	r24, r20
     826:	30 01       	movw	r6, r0
     828:	85 9f       	mul	r24, r21
     82a:	70 0c       	add	r7, r0
     82c:	94 9f       	mul	r25, r20
     82e:	70 0c       	add	r7, r0
     830:	11 24       	eor	r1, r1
     832:	7c 82       	std	Y+4, r7	; 0x04
     834:	6b 82       	std	Y+3, r6	; 0x03
	int r2=arr2[1][0]*arr2[1][1]*arr2[1][2];
     836:	80 85       	ldd	r24, Z+8	; 0x08
     838:	91 85       	ldd	r25, Z+9	; 0x09
	int c3=arr2[0][2]*arr2[1][2]*arr2[2][2];
	
	int dig1=arr2[0][0]*arr2[1][1]*arr2[2][2];
	int dig2=arr2[0][2]*arr2[1][1]*arr2[2][0];
	
	if(arr2[1][1]==2)
     83a:	82 30       	cpi	r24, 0x02	; 2
     83c:	91 05       	cpc	r25, r1
     83e:	51 f4       	brne	.+20     	; 0x854 <nextStep+0x7a>
	{
		arr1[1][1]='0';
     840:	80 e3       	ldi	r24, 0x30	; 48
     842:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <arr1+0x4>
		arr2[1][1]=3;
     846:	83 e0       	ldi	r24, 0x03	; 3
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <arr2+0x9>
     84e:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <arr2+0x8>
     852:	af c5       	rjmp	.+2910   	; 0x13b2 <__stack+0xb53>
	}
	else if(r1==125 || r2==125 || r3==125 || c1==125 || c2==125 || c3==125 || dig1==125 || dig2==125)
     854:	0b 81       	ldd	r16, Y+3	; 0x03
     856:	1c 81       	ldd	r17, Y+4	; 0x04
     858:	0d 37       	cpi	r16, 0x7D	; 125
     85a:	11 05       	cpc	r17, r1
     85c:	09 f4       	brne	.+2      	; 0x860 <__stack+0x1>
     85e:	a7 c0       	rjmp	.+334    	; 0x9ae <__stack+0x14f>
}

void nextStep()
{
	int r1=arr2[0][0]*arr2[0][1]*arr2[0][2];
	int r2=arr2[1][0]*arr2[1][1]*arr2[1][2];
     860:	a1 ee       	ldi	r26, 0xE1	; 225
     862:	b1 e0       	ldi	r27, 0x01	; 1
     864:	16 96       	adiw	r26, 0x06	; 6
     866:	ed 91       	ld	r30, X+
     868:	fc 91       	ld	r31, X
     86a:	17 97       	sbiw	r26, 0x07	; 7
     86c:	1a 96       	adiw	r26, 0x0a	; 10
     86e:	0d 91       	ld	r16, X+
     870:	1c 91       	ld	r17, X
     872:	1b 97       	sbiw	r26, 0x0b	; 11
     874:	e8 9f       	mul	r30, r24
     876:	d0 01       	movw	r26, r0
     878:	e9 9f       	mul	r30, r25
     87a:	b0 0d       	add	r27, r0
     87c:	f8 9f       	mul	r31, r24
     87e:	b0 0d       	add	r27, r0
     880:	11 24       	eor	r1, r1
     882:	a0 9f       	mul	r26, r16
     884:	50 01       	movw	r10, r0
     886:	a1 9f       	mul	r26, r17
     888:	b0 0c       	add	r11, r0
     88a:	b0 9f       	mul	r27, r16
     88c:	b0 0c       	add	r11, r0
     88e:	11 24       	eor	r1, r1
	if(arr2[1][1]==2)
	{
		arr1[1][1]='0';
		arr2[1][1]=3;
	}
	else if(r1==125 || r2==125 || r3==125 || c1==125 || c2==125 || c3==125 || dig1==125 || dig2==125)
     890:	ad e7       	ldi	r26, 0x7D	; 125
     892:	aa 16       	cp	r10, r26
     894:	b1 04       	cpc	r11, r1
     896:	09 f4       	brne	.+2      	; 0x89a <__stack+0x3b>
     898:	8a c0       	rjmp	.+276    	; 0x9ae <__stack+0x14f>

void nextStep()
{
	int r1=arr2[0][0]*arr2[0][1]*arr2[0][2];
	int r2=arr2[1][0]*arr2[1][1]*arr2[1][2];
	int r3=arr2[2][0]*arr2[2][1]*arr2[2][2];
     89a:	0f 2e       	mov	r0, r31
     89c:	f1 ee       	ldi	r31, 0xE1	; 225
     89e:	ef 2e       	mov	r14, r31
     8a0:	f1 e0       	ldi	r31, 0x01	; 1
     8a2:	ff 2e       	mov	r15, r31
     8a4:	f0 2d       	mov	r31, r0
     8a6:	d7 01       	movw	r26, r14
     8a8:	1c 96       	adiw	r26, 0x0c	; 12
     8aa:	0d 90       	ld	r0, X+
     8ac:	bc 91       	ld	r27, X
     8ae:	a0 2d       	mov	r26, r0
     8b0:	ba 83       	std	Y+2, r27	; 0x02
     8b2:	a9 83       	std	Y+1, r26	; 0x01
     8b4:	d7 01       	movw	r26, r14
     8b6:	1e 96       	adiw	r26, 0x0e	; 14
     8b8:	8d 90       	ld	r8, X+
     8ba:	9c 90       	ld	r9, X
     8bc:	1f 97       	sbiw	r26, 0x0f	; 15
     8be:	50 96       	adiw	r26, 0x10	; 16
     8c0:	ed 90       	ld	r14, X+
     8c2:	fc 90       	ld	r15, X
     8c4:	51 97       	sbiw	r26, 0x11	; 17
     8c6:	69 80       	ldd	r6, Y+1	; 0x01
     8c8:	7a 80       	ldd	r7, Y+2	; 0x02
     8ca:	68 9c       	mul	r6, r8
     8cc:	60 01       	movw	r12, r0
     8ce:	69 9c       	mul	r6, r9
     8d0:	d0 0c       	add	r13, r0
     8d2:	78 9c       	mul	r7, r8
     8d4:	d0 0c       	add	r13, r0
     8d6:	11 24       	eor	r1, r1
     8d8:	ce 9c       	mul	r12, r14
     8da:	30 01       	movw	r6, r0
     8dc:	cf 9c       	mul	r12, r15
     8de:	70 0c       	add	r7, r0
     8e0:	de 9c       	mul	r13, r14
     8e2:	70 0c       	add	r7, r0
     8e4:	11 24       	eor	r1, r1
	if(arr2[1][1]==2)
	{
		arr1[1][1]='0';
		arr2[1][1]=3;
	}
	else if(r1==125 || r2==125 || r3==125 || c1==125 || c2==125 || c3==125 || dig1==125 || dig2==125)
     8e6:	ad e7       	ldi	r26, 0x7D	; 125
     8e8:	6a 16       	cp	r6, r26
     8ea:	71 04       	cpc	r7, r1
     8ec:	09 f4       	brne	.+2      	; 0x8f0 <__stack+0x91>
     8ee:	5f c0       	rjmp	.+190    	; 0x9ae <__stack+0x14f>
{
	int r1=arr2[0][0]*arr2[0][1]*arr2[0][2];
	int r2=arr2[1][0]*arr2[1][1]*arr2[1][2];
	int r3=arr2[2][0]*arr2[2][1]*arr2[2][2];
	
	int c1=arr2[0][0]*arr2[1][0]*arr2[2][0];
     8f0:	2e 9f       	mul	r18, r30
     8f2:	60 01       	movw	r12, r0
     8f4:	2f 9f       	mul	r18, r31
     8f6:	d0 0c       	add	r13, r0
     8f8:	3e 9f       	mul	r19, r30
     8fa:	d0 0c       	add	r13, r0
     8fc:	11 24       	eor	r1, r1
     8fe:	e9 81       	ldd	r30, Y+1	; 0x01
     900:	fa 81       	ldd	r31, Y+2	; 0x02
     902:	ce 9e       	mul	r12, r30
     904:	20 01       	movw	r4, r0
     906:	cf 9e       	mul	r12, r31
     908:	50 0c       	add	r5, r0
     90a:	de 9e       	mul	r13, r30
     90c:	50 0c       	add	r5, r0
     90e:	11 24       	eor	r1, r1
	if(arr2[1][1]==2)
	{
		arr1[1][1]='0';
		arr2[1][1]=3;
	}
	else if(r1==125 || r2==125 || r3==125 || c1==125 || c2==125 || c3==125 || dig1==125 || dig2==125)
     910:	fd e7       	ldi	r31, 0x7D	; 125
     912:	4f 16       	cp	r4, r31
     914:	51 04       	cpc	r5, r1
     916:	09 f4       	brne	.+2      	; 0x91a <__stack+0xbb>
     918:	4a c0       	rjmp	.+148    	; 0x9ae <__stack+0x14f>
	int r1=arr2[0][0]*arr2[0][1]*arr2[0][2];
	int r2=arr2[1][0]*arr2[1][1]*arr2[1][2];
	int r3=arr2[2][0]*arr2[2][1]*arr2[2][2];
	
	int c1=arr2[0][0]*arr2[1][0]*arr2[2][0];
	int c2=arr2[0][1]*arr2[1][1]*arr2[2][1];
     91a:	68 9f       	mul	r22, r24
     91c:	f0 01       	movw	r30, r0
     91e:	69 9f       	mul	r22, r25
     920:	f0 0d       	add	r31, r0
     922:	78 9f       	mul	r23, r24
     924:	f0 0d       	add	r31, r0
     926:	11 24       	eor	r1, r1
     928:	e8 9d       	mul	r30, r8
     92a:	60 01       	movw	r12, r0
     92c:	e9 9d       	mul	r30, r9
     92e:	d0 0c       	add	r13, r0
     930:	f8 9d       	mul	r31, r8
     932:	d0 0c       	add	r13, r0
     934:	11 24       	eor	r1, r1
	if(arr2[1][1]==2)
	{
		arr1[1][1]='0';
		arr2[1][1]=3;
	}
	else if(r1==125 || r2==125 || r3==125 || c1==125 || c2==125 || c3==125 || dig1==125 || dig2==125)
     936:	6d e7       	ldi	r22, 0x7D	; 125
     938:	c6 16       	cp	r12, r22
     93a:	d1 04       	cpc	r13, r1
     93c:	c1 f1       	breq	.+112    	; 0x9ae <__stack+0x14f>
	int r2=arr2[1][0]*arr2[1][1]*arr2[1][2];
	int r3=arr2[2][0]*arr2[2][1]*arr2[2][2];
	
	int c1=arr2[0][0]*arr2[1][0]*arr2[2][0];
	int c2=arr2[0][1]*arr2[1][1]*arr2[2][1];
	int c3=arr2[0][2]*arr2[1][2]*arr2[2][2];
     93e:	40 9f       	mul	r20, r16
     940:	b0 01       	movw	r22, r0
     942:	41 9f       	mul	r20, r17
     944:	70 0d       	add	r23, r0
     946:	50 9f       	mul	r21, r16
     948:	70 0d       	add	r23, r0
     94a:	11 24       	eor	r1, r1
     94c:	6e 9d       	mul	r22, r14
     94e:	40 01       	movw	r8, r0
     950:	6f 9d       	mul	r22, r15
     952:	90 0c       	add	r9, r0
     954:	7e 9d       	mul	r23, r14
     956:	90 0c       	add	r9, r0
     958:	11 24       	eor	r1, r1
	if(arr2[1][1]==2)
	{
		arr1[1][1]='0';
		arr2[1][1]=3;
	}
	else if(r1==125 || r2==125 || r3==125 || c1==125 || c2==125 || c3==125 || dig1==125 || dig2==125)
     95a:	ad e7       	ldi	r26, 0x7D	; 125
     95c:	8a 16       	cp	r8, r26
     95e:	91 04       	cpc	r9, r1
     960:	31 f1       	breq	.+76     	; 0x9ae <__stack+0x14f>
	
	int c1=arr2[0][0]*arr2[1][0]*arr2[2][0];
	int c2=arr2[0][1]*arr2[1][1]*arr2[2][1];
	int c3=arr2[0][2]*arr2[1][2]*arr2[2][2];
	
	int dig1=arr2[0][0]*arr2[1][1]*arr2[2][2];
     962:	28 9f       	mul	r18, r24
     964:	b0 01       	movw	r22, r0
     966:	29 9f       	mul	r18, r25
     968:	70 0d       	add	r23, r0
     96a:	38 9f       	mul	r19, r24
     96c:	70 0d       	add	r23, r0
     96e:	11 24       	eor	r1, r1
     970:	6e 9d       	mul	r22, r14
     972:	10 01       	movw	r2, r0
     974:	6f 9d       	mul	r22, r15
     976:	30 0c       	add	r3, r0
     978:	7e 9d       	mul	r23, r14
     97a:	30 0c       	add	r3, r0
     97c:	11 24       	eor	r1, r1
	if(arr2[1][1]==2)
	{
		arr1[1][1]='0';
		arr2[1][1]=3;
	}
	else if(r1==125 || r2==125 || r3==125 || c1==125 || c2==125 || c3==125 || dig1==125 || dig2==125)
     97e:	bd e7       	ldi	r27, 0x7D	; 125
     980:	2b 16       	cp	r2, r27
     982:	31 04       	cpc	r3, r1
     984:	a1 f0       	breq	.+40     	; 0x9ae <__stack+0x14f>
	int c1=arr2[0][0]*arr2[1][0]*arr2[2][0];
	int c2=arr2[0][1]*arr2[1][1]*arr2[2][1];
	int c3=arr2[0][2]*arr2[1][2]*arr2[2][2];
	
	int dig1=arr2[0][0]*arr2[1][1]*arr2[2][2];
	int dig2=arr2[0][2]*arr2[1][1]*arr2[2][0];
     986:	48 9f       	mul	r20, r24
     988:	90 01       	movw	r18, r0
     98a:	49 9f       	mul	r20, r25
     98c:	30 0d       	add	r19, r0
     98e:	58 9f       	mul	r21, r24
     990:	30 0d       	add	r19, r0
     992:	11 24       	eor	r1, r1
     994:	e9 81       	ldd	r30, Y+1	; 0x01
     996:	fa 81       	ldd	r31, Y+2	; 0x02
     998:	2e 9f       	mul	r18, r30
     99a:	80 01       	movw	r16, r0
     99c:	2f 9f       	mul	r18, r31
     99e:	10 0d       	add	r17, r0
     9a0:	3e 9f       	mul	r19, r30
     9a2:	10 0d       	add	r17, r0
     9a4:	11 24       	eor	r1, r1
	if(arr2[1][1]==2)
	{
		arr1[1][1]='0';
		arr2[1][1]=3;
	}
	else if(r1==125 || r2==125 || r3==125 || c1==125 || c2==125 || c3==125 || dig1==125 || dig2==125)
     9a6:	0d 37       	cpi	r16, 0x7D	; 125
     9a8:	11 05       	cpc	r17, r1
     9aa:	09 f0       	breq	.+2      	; 0x9ae <__stack+0x14f>
     9ac:	48 c0       	rjmp	.+144    	; 0xa3e <__stack+0x1df>
	{
		printData();
     9ae:	0e 94 b3 00 	call	0x166	; 0x166 <printData>
     9b2:	ff e3       	ldi	r31, 0x3F	; 63
     9b4:	0d e0       	ldi	r16, 0x0D	; 13
     9b6:	13 e0       	ldi	r17, 0x03	; 3
     9b8:	f1 50       	subi	r31, 0x01	; 1
     9ba:	00 40       	sbci	r16, 0x00	; 0
     9bc:	10 40       	sbci	r17, 0x00	; 0
     9be:	e1 f7       	brne	.-8      	; 0x9b8 <__stack+0x159>
     9c0:	00 c0       	rjmp	.+0      	; 0x9c2 <__stack+0x163>
     9c2:	00 00       	nop
		_delay_ms(1000);
		LCD_cmd(0xD4);
     9c4:	84 ed       	ldi	r24, 0xD4	; 212
     9c6:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
		LCD_write_string("...................");
     9ca:	86 e6       	ldi	r24, 0x66	; 102
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
		LCD_cmd(0xD4);
     9d2:	84 ed       	ldi	r24, 0xD4	; 212
     9d4:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
		LCD_write_string("You won............");
     9d8:	8a e2       	ldi	r24, 0x2A	; 42
     9da:	91 e0       	ldi	r25, 0x01	; 1
     9dc:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
		
		LCD_cmd(0x80);
     9e0:	80 e8       	ldi	r24, 0x80	; 128
     9e2:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
		LCD_write_string("Congratulation.........");
     9e6:	8e e3       	ldi	r24, 0x3E	; 62
     9e8:	91 e0       	ldi	r25, 0x01	; 1
     9ea:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
		LCD_cmd(0xc0);
     9ee:	80 ec       	ldi	r24, 0xC0	; 192
     9f0:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
		LCD_write_string("new Match in 5s.....");
     9f4:	8c ef       	ldi	r24, 0xFC	; 252
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
		LCD_cmd(0x94);
     9fc:	84 e9       	ldi	r24, 0x94	; 148
     9fe:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
		LCD_write_string("...............");
     a02:	84 ed       	ldi	r24, 0xD4	; 212
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
     a0a:	2f e3       	ldi	r18, 0x3F	; 63
     a0c:	62 e4       	ldi	r22, 0x42	; 66
     a0e:	8f e0       	ldi	r24, 0x0F	; 15
     a10:	21 50       	subi	r18, 0x01	; 1
     a12:	60 40       	sbci	r22, 0x00	; 0
     a14:	80 40       	sbci	r24, 0x00	; 0
     a16:	e1 f7       	brne	.-8      	; 0xa10 <__stack+0x1b1>
     a18:	00 c0       	rjmp	.+0      	; 0xa1a <__stack+0x1bb>
     a1a:	00 00       	nop
		_delay_ms(5000);
		LCD_cmd(0x80);
     a1c:	80 e8       	ldi	r24, 0x80	; 128
     a1e:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
		LCD_write_string("                        ");
     a22:	81 e1       	ldi	r24, 0x11	; 17
     a24:	91 e0       	ldi	r25, 0x01	; 1
     a26:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
		LCD_cmd(0xc0);
     a2a:	80 ec       	ldi	r24, 0xC0	; 192
     a2c:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
		LCD_write_string("                        ");
     a30:	81 e1       	ldi	r24, 0x11	; 17
     a32:	91 e0       	ldi	r25, 0x01	; 1
     a34:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
		init();
     a38:	0e 94 fd 02 	call	0x5fa	; 0x5fa <init>
	{
		arr1[1][1]='0';
		arr2[1][1]=3;
	}
	else if(r1==125 || r2==125 || r3==125 || c1==125 || c2==125 || c3==125 || dig1==125 || dig2==125)
	{
     a3c:	ba c4       	rjmp	.+2420   	; 0x13b2 <__stack+0xb53>
		LCD_write_string("                        ");
		init();
	}
	else
	{
		LCD_cmd(0xD4);
     a3e:	84 ed       	ldi	r24, 0xD4	; 212
     a40:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
		LCD_write_string("...................");
     a44:	86 e6       	ldi	r24, 0x66	; 102
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
		LCD_cmd(0xD4);
     a4c:	84 ed       	ldi	r24, 0xD4	; 212
     a4e:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
		LCD_write_string("Machine's turn.....");
     a52:	86 e5       	ldi	r24, 0x56	; 86
     a54:	91 e0       	ldi	r25, 0x01	; 1
     a56:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
     a5a:	9f e3       	ldi	r25, 0x3F	; 63
     a5c:	ad e0       	ldi	r26, 0x0D	; 13
     a5e:	b3 e0       	ldi	r27, 0x03	; 3
     a60:	91 50       	subi	r25, 0x01	; 1
     a62:	a0 40       	sbci	r26, 0x00	; 0
     a64:	b0 40       	sbci	r27, 0x00	; 0
     a66:	e1 f7       	brne	.-8      	; 0xa60 <__stack+0x201>
     a68:	00 c0       	rjmp	.+0      	; 0xa6a <__stack+0x20b>
     a6a:	00 00       	nop
		_delay_ms(1000);
		
		if(r1==18 || r2==18 || r3==18 || c1==18 || c2==18 || c3==18 || dig1==18 || dig2==18)
     a6c:	eb 81       	ldd	r30, Y+3	; 0x03
     a6e:	fc 81       	ldd	r31, Y+4	; 0x04
     a70:	72 97       	sbiw	r30, 0x12	; 18
     a72:	11 f1       	breq	.+68     	; 0xab8 <__stack+0x259>
     a74:	f2 e1       	ldi	r31, 0x12	; 18
     a76:	af 16       	cp	r10, r31
     a78:	b1 04       	cpc	r11, r1
     a7a:	a1 f1       	breq	.+104    	; 0xae4 <__stack+0x285>
     a7c:	22 e1       	ldi	r18, 0x12	; 18
     a7e:	62 16       	cp	r6, r18
     a80:	71 04       	cpc	r7, r1
     a82:	09 f4       	brne	.+2      	; 0xa86 <__stack+0x227>
     a84:	47 c0       	rjmp	.+142    	; 0xb14 <__stack+0x2b5>
     a86:	62 e1       	ldi	r22, 0x12	; 18
     a88:	46 16       	cp	r4, r22
     a8a:	51 04       	cpc	r5, r1
     a8c:	09 f4       	brne	.+2      	; 0xa90 <__stack+0x231>
     a8e:	5a c0       	rjmp	.+180    	; 0xb44 <__stack+0x2e5>
     a90:	82 e1       	ldi	r24, 0x12	; 18
     a92:	c8 16       	cp	r12, r24
     a94:	d1 04       	cpc	r13, r1
     a96:	09 f4       	brne	.+2      	; 0xa9a <__stack+0x23b>
     a98:	6b c0       	rjmp	.+214    	; 0xb70 <__stack+0x311>
     a9a:	92 e1       	ldi	r25, 0x12	; 18
     a9c:	89 16       	cp	r8, r25
     a9e:	91 04       	cpc	r9, r1
     aa0:	09 f4       	brne	.+2      	; 0xaa4 <__stack+0x245>
     aa2:	7e c0       	rjmp	.+252    	; 0xba0 <__stack+0x341>
     aa4:	a2 e1       	ldi	r26, 0x12	; 18
     aa6:	2a 16       	cp	r2, r26
     aa8:	31 04       	cpc	r3, r1
     aaa:	09 f4       	brne	.+2      	; 0xaae <__stack+0x24f>
     aac:	91 c0       	rjmp	.+290    	; 0xbd0 <__stack+0x371>
     aae:	02 31       	cpi	r16, 0x12	; 18
     ab0:	11 05       	cpc	r17, r1
     ab2:	09 f0       	breq	.+2      	; 0xab6 <__stack+0x257>
     ab4:	34 c1       	rjmp	.+616    	; 0xd1e <__stack+0x4bf>
     ab6:	bc c0       	rjmp	.+376    	; 0xc30 <__stack+0x3d1>
     ab8:	e1 ee       	ldi	r30, 0xE1	; 225
     aba:	f1 e0       	ldi	r31, 0x01	; 1
     abc:	a6 ed       	ldi	r26, 0xD6	; 214
     abe:	b1 e0       	ldi	r27, 0x01	; 1
     ac0:	27 ee       	ldi	r18, 0xE7	; 231
     ac2:	31 e0       	ldi	r19, 0x01	; 1
			{
				for(int i=0;i<3;i++)
				{
					if(arr2[0][i]==2)
					{
						arr2[0][i]=3;
     ac4:	63 e0       	ldi	r22, 0x03	; 3
     ac6:	70 e0       	ldi	r23, 0x00	; 0
						arr1[0][i]='0';
     ac8:	40 e3       	ldi	r20, 0x30	; 48
			
			if(r1==18)
			{
				for(int i=0;i<3;i++)
				{
					if(arr2[0][i]==2)
     aca:	80 81       	ld	r24, Z
     acc:	91 81       	ldd	r25, Z+1	; 0x01
     ace:	02 97       	sbiw	r24, 0x02	; 2
     ad0:	19 f4       	brne	.+6      	; 0xad8 <__stack+0x279>
					{
						arr2[0][i]=3;
     ad2:	71 83       	std	Z+1, r23	; 0x01
     ad4:	60 83       	st	Z, r22
						arr1[0][i]='0';
     ad6:	4c 93       	st	X, r20
     ad8:	32 96       	adiw	r30, 0x02	; 2
     ada:	11 96       	adiw	r26, 0x01	; 1
		if(r1==18 || r2==18 || r3==18 || c1==18 || c2==18 || c3==18 || dig1==18 || dig2==18)
		{
			
			if(r1==18)
			{
				for(int i=0;i<3;i++)
     adc:	2e 17       	cp	r18, r30
     ade:	3f 07       	cpc	r19, r31
     ae0:	a1 f7       	brne	.-24     	; 0xaca <__stack+0x26b>
     ae2:	d5 c0       	rjmp	.+426    	; 0xc8e <__stack+0x42f>
     ae4:	e1 ee       	ldi	r30, 0xE1	; 225
     ae6:	f1 e0       	ldi	r31, 0x01	; 1
     ae8:	a6 ed       	ldi	r26, 0xD6	; 214
     aea:	b1 e0       	ldi	r27, 0x01	; 1
     aec:	27 ee       	ldi	r18, 0xE7	; 231
     aee:	31 e0       	ldi	r19, 0x01	; 1
			{
				for(int i=0;i<3;i++)
				{
					if(arr2[1][i]==2)
					{
						arr2[1][i]=3;
     af0:	63 e0       	ldi	r22, 0x03	; 3
     af2:	70 e0       	ldi	r23, 0x00	; 0
						arr1[1][i]='0';
     af4:	40 e3       	ldi	r20, 0x30	; 48
			}
			else if(r2==18)
			{
				for(int i=0;i<3;i++)
				{
					if(arr2[1][i]==2)
     af6:	86 81       	ldd	r24, Z+6	; 0x06
     af8:	97 81       	ldd	r25, Z+7	; 0x07
     afa:	02 97       	sbiw	r24, 0x02	; 2
     afc:	29 f4       	brne	.+10     	; 0xb08 <__stack+0x2a9>
					{
						arr2[1][i]=3;
     afe:	77 83       	std	Z+7, r23	; 0x07
     b00:	66 83       	std	Z+6, r22	; 0x06
						arr1[1][i]='0';
     b02:	13 96       	adiw	r26, 0x03	; 3
     b04:	4c 93       	st	X, r20
     b06:	13 97       	sbiw	r26, 0x03	; 3
     b08:	32 96       	adiw	r30, 0x02	; 2
     b0a:	11 96       	adiw	r26, 0x01	; 1
					}
				}
			}
			else if(r2==18)
			{
				for(int i=0;i<3;i++)
     b0c:	2e 17       	cp	r18, r30
     b0e:	3f 07       	cpc	r19, r31
     b10:	91 f7       	brne	.-28     	; 0xaf6 <__stack+0x297>
     b12:	bd c0       	rjmp	.+378    	; 0xc8e <__stack+0x42f>
     b14:	e1 ee       	ldi	r30, 0xE1	; 225
     b16:	f1 e0       	ldi	r31, 0x01	; 1
     b18:	a6 ed       	ldi	r26, 0xD6	; 214
     b1a:	b1 e0       	ldi	r27, 0x01	; 1
     b1c:	27 ee       	ldi	r18, 0xE7	; 231
     b1e:	31 e0       	ldi	r19, 0x01	; 1
			{
				for(int i=0;i<3;i++)
				{
					if(arr2[2][i]==2)
					{
						arr2[2][i]=3;
     b20:	63 e0       	ldi	r22, 0x03	; 3
     b22:	70 e0       	ldi	r23, 0x00	; 0
						arr1[2][i]='0';
     b24:	40 e3       	ldi	r20, 0x30	; 48
			}
			else if(r3==18)
			{
				for(int i=0;i<3;i++)
				{
					if(arr2[2][i]==2)
     b26:	84 85       	ldd	r24, Z+12	; 0x0c
     b28:	95 85       	ldd	r25, Z+13	; 0x0d
     b2a:	02 97       	sbiw	r24, 0x02	; 2
     b2c:	29 f4       	brne	.+10     	; 0xb38 <__stack+0x2d9>
					{
						arr2[2][i]=3;
     b2e:	75 87       	std	Z+13, r23	; 0x0d
     b30:	64 87       	std	Z+12, r22	; 0x0c
						arr1[2][i]='0';
     b32:	16 96       	adiw	r26, 0x06	; 6
     b34:	4c 93       	st	X, r20
     b36:	16 97       	sbiw	r26, 0x06	; 6
     b38:	32 96       	adiw	r30, 0x02	; 2
     b3a:	11 96       	adiw	r26, 0x01	; 1
					}
				}
			}
			else if(r3==18)
			{
				for(int i=0;i<3;i++)
     b3c:	e2 17       	cp	r30, r18
     b3e:	f3 07       	cpc	r31, r19
     b40:	91 f7       	brne	.-28     	; 0xb26 <__stack+0x2c7>
     b42:	a5 c0       	rjmp	.+330    	; 0xc8e <__stack+0x42f>
     b44:	e1 ee       	ldi	r30, 0xE1	; 225
     b46:	f1 e0       	ldi	r31, 0x01	; 1
     b48:	a6 ed       	ldi	r26, 0xD6	; 214
     b4a:	b1 e0       	ldi	r27, 0x01	; 1
     b4c:	23 ef       	ldi	r18, 0xF3	; 243
     b4e:	31 e0       	ldi	r19, 0x01	; 1
			{
				for(int i=0;i<3;i++)
				{
					if(arr2[i][0]==2)
					{
						arr2[i][0]=3;
     b50:	63 e0       	ldi	r22, 0x03	; 3
     b52:	70 e0       	ldi	r23, 0x00	; 0
						arr1[i][0]='0';
     b54:	40 e3       	ldi	r20, 0x30	; 48
			}
			else if(c1==18)
			{
				for(int i=0;i<3;i++)
				{
					if(arr2[i][0]==2)
     b56:	80 81       	ld	r24, Z
     b58:	91 81       	ldd	r25, Z+1	; 0x01
     b5a:	02 97       	sbiw	r24, 0x02	; 2
     b5c:	19 f4       	brne	.+6      	; 0xb64 <__stack+0x305>
					{
						arr2[i][0]=3;
     b5e:	71 83       	std	Z+1, r23	; 0x01
     b60:	60 83       	st	Z, r22
						arr1[i][0]='0';
     b62:	4c 93       	st	X, r20
     b64:	36 96       	adiw	r30, 0x06	; 6
     b66:	13 96       	adiw	r26, 0x03	; 3
					}
				}
			}
			else if(c1==18)
			{
				for(int i=0;i<3;i++)
     b68:	e2 17       	cp	r30, r18
     b6a:	f3 07       	cpc	r31, r19
     b6c:	a1 f7       	brne	.-24     	; 0xb56 <__stack+0x2f7>
     b6e:	8f c0       	rjmp	.+286    	; 0xc8e <__stack+0x42f>
     b70:	e1 ee       	ldi	r30, 0xE1	; 225
     b72:	f1 e0       	ldi	r31, 0x01	; 1
     b74:	a6 ed       	ldi	r26, 0xD6	; 214
     b76:	b1 e0       	ldi	r27, 0x01	; 1
     b78:	23 ef       	ldi	r18, 0xF3	; 243
     b7a:	31 e0       	ldi	r19, 0x01	; 1
			{
				for(int i=0;i<3;i++)
				{
					if(arr2[i][1]==2)
					{
						arr2[i][1]=3;
     b7c:	63 e0       	ldi	r22, 0x03	; 3
     b7e:	70 e0       	ldi	r23, 0x00	; 0
						arr1[i][1]='0';
     b80:	40 e3       	ldi	r20, 0x30	; 48
			}
			else if(c2==18)
			{
				for(int i=0;i<3;i++)
				{
					if(arr2[i][1]==2)
     b82:	82 81       	ldd	r24, Z+2	; 0x02
     b84:	93 81       	ldd	r25, Z+3	; 0x03
     b86:	02 97       	sbiw	r24, 0x02	; 2
     b88:	29 f4       	brne	.+10     	; 0xb94 <__stack+0x335>
					{
						arr2[i][1]=3;
     b8a:	73 83       	std	Z+3, r23	; 0x03
     b8c:	62 83       	std	Z+2, r22	; 0x02
						arr1[i][1]='0';
     b8e:	11 96       	adiw	r26, 0x01	; 1
     b90:	4c 93       	st	X, r20
     b92:	11 97       	sbiw	r26, 0x01	; 1
     b94:	36 96       	adiw	r30, 0x06	; 6
     b96:	13 96       	adiw	r26, 0x03	; 3
					}
				}
			}
			else if(c2==18)
			{
				for(int i=0;i<3;i++)
     b98:	e2 17       	cp	r30, r18
     b9a:	f3 07       	cpc	r31, r19
     b9c:	91 f7       	brne	.-28     	; 0xb82 <__stack+0x323>
     b9e:	77 c0       	rjmp	.+238    	; 0xc8e <__stack+0x42f>
     ba0:	e1 ee       	ldi	r30, 0xE1	; 225
     ba2:	f1 e0       	ldi	r31, 0x01	; 1
     ba4:	a6 ed       	ldi	r26, 0xD6	; 214
     ba6:	b1 e0       	ldi	r27, 0x01	; 1
     ba8:	23 ef       	ldi	r18, 0xF3	; 243
     baa:	31 e0       	ldi	r19, 0x01	; 1
			{
				for(int i=0;i<3;i++)
				{
					if(arr2[i][2]==2)
					{
						arr2[i][2]=3;
     bac:	63 e0       	ldi	r22, 0x03	; 3
     bae:	70 e0       	ldi	r23, 0x00	; 0
						arr1[i][2]='0';
     bb0:	40 e3       	ldi	r20, 0x30	; 48
			}
			else if(c3==18)
			{
				for(int i=0;i<3;i++)
				{
					if(arr2[i][2]==2)
     bb2:	84 81       	ldd	r24, Z+4	; 0x04
     bb4:	95 81       	ldd	r25, Z+5	; 0x05
     bb6:	02 97       	sbiw	r24, 0x02	; 2
     bb8:	29 f4       	brne	.+10     	; 0xbc4 <__stack+0x365>
					{
						arr2[i][2]=3;
     bba:	75 83       	std	Z+5, r23	; 0x05
     bbc:	64 83       	std	Z+4, r22	; 0x04
						arr1[i][2]='0';
     bbe:	12 96       	adiw	r26, 0x02	; 2
     bc0:	4c 93       	st	X, r20
     bc2:	12 97       	sbiw	r26, 0x02	; 2
     bc4:	36 96       	adiw	r30, 0x06	; 6
     bc6:	13 96       	adiw	r26, 0x03	; 3
					}
				}
			}
			else if(c3==18)
			{
				for(int i=0;i<3;i++)
     bc8:	e2 17       	cp	r30, r18
     bca:	f3 07       	cpc	r31, r19
     bcc:	91 f7       	brne	.-28     	; 0xbb2 <__stack+0x353>
     bce:	5f c0       	rjmp	.+190    	; 0xc8e <__stack+0x42f>
					}
				}
			}
			else if(dig1==18)
			{
				if(arr2[0][0]==2)
     bd0:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <arr2>
     bd4:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <arr2+0x1>
     bd8:	02 97       	sbiw	r24, 0x02	; 2
     bda:	51 f4       	brne	.+20     	; 0xbf0 <__stack+0x391>
				{
					arr2[0][0]=3;
     bdc:	83 e0       	ldi	r24, 0x03	; 3
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <arr2+0x1>
     be4:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <arr2>
					arr1[0][0]='0';
     be8:	80 e3       	ldi	r24, 0x30	; 48
     bea:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <arr1>
     bee:	4f c0       	rjmp	.+158    	; 0xc8e <__stack+0x42f>
				}
				else if(arr2[1][1]==2)
     bf0:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <arr2+0x8>
     bf4:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <arr2+0x9>
     bf8:	02 97       	sbiw	r24, 0x02	; 2
     bfa:	51 f4       	brne	.+20     	; 0xc10 <__stack+0x3b1>
				{
					arr2[1][1]=3;
     bfc:	83 e0       	ldi	r24, 0x03	; 3
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <arr2+0x9>
     c04:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <arr2+0x8>
					arr1[1][1]='0';
     c08:	80 e3       	ldi	r24, 0x30	; 48
     c0a:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <arr1+0x4>
     c0e:	3f c0       	rjmp	.+126    	; 0xc8e <__stack+0x42f>
				}
				else if(arr2[2][2]==2)
     c10:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <arr2+0x10>
     c14:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <arr2+0x11>
     c18:	02 97       	sbiw	r24, 0x02	; 2
     c1a:	c9 f5       	brne	.+114    	; 0xc8e <__stack+0x42f>
				{
					arr2[2][2]=3;
     c1c:	83 e0       	ldi	r24, 0x03	; 3
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <arr2+0x11>
     c24:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <arr2+0x10>
					arr1[2][2]='0';
     c28:	80 e3       	ldi	r24, 0x30	; 48
     c2a:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <arr1+0x8>
     c2e:	2f c0       	rjmp	.+94     	; 0xc8e <__stack+0x42f>
				}
			}
			else if(dig2==18)
			{
				if(arr2[0][2]==2)
     c30:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <arr2+0x4>
     c34:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <arr2+0x5>
     c38:	02 97       	sbiw	r24, 0x02	; 2
     c3a:	51 f4       	brne	.+20     	; 0xc50 <__stack+0x3f1>
				{
					arr2[0][2]=3;
     c3c:	83 e0       	ldi	r24, 0x03	; 3
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <arr2+0x5>
     c44:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <arr2+0x4>
					arr1[0][2]='0';
     c48:	80 e3       	ldi	r24, 0x30	; 48
     c4a:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <arr1+0x2>
     c4e:	1f c0       	rjmp	.+62     	; 0xc8e <__stack+0x42f>
				}
				else if(arr2[1][1]==2)
     c50:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <arr2+0x8>
     c54:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <arr2+0x9>
     c58:	02 97       	sbiw	r24, 0x02	; 2
     c5a:	51 f4       	brne	.+20     	; 0xc70 <__stack+0x411>
				{
					arr2[1][1]=3;
     c5c:	83 e0       	ldi	r24, 0x03	; 3
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <arr2+0x9>
     c64:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <arr2+0x8>
					arr1[1][1]='0';
     c68:	80 e3       	ldi	r24, 0x30	; 48
     c6a:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <arr1+0x4>
     c6e:	0f c0       	rjmp	.+30     	; 0xc8e <__stack+0x42f>
				}
				else if(arr2[2][0]==2)
     c70:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <arr2+0xc>
     c74:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <arr2+0xd>
     c78:	02 97       	sbiw	r24, 0x02	; 2
     c7a:	49 f4       	brne	.+18     	; 0xc8e <__stack+0x42f>
				{
					arr2[2][0]=3;
     c7c:	83 e0       	ldi	r24, 0x03	; 3
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <arr2+0xd>
     c84:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <arr2+0xc>
					arr1[2][0]='0';
     c88:	80 e3       	ldi	r24, 0x30	; 48
     c8a:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <arr1+0x6>
				}
			}
			printData();
     c8e:	0e 94 b3 00 	call	0x166	; 0x166 <printData>
     c92:	bf e3       	ldi	r27, 0x3F	; 63
     c94:	ed e0       	ldi	r30, 0x0D	; 13
     c96:	f3 e0       	ldi	r31, 0x03	; 3
     c98:	b1 50       	subi	r27, 0x01	; 1
     c9a:	e0 40       	sbci	r30, 0x00	; 0
     c9c:	f0 40       	sbci	r31, 0x00	; 0
     c9e:	e1 f7       	brne	.-8      	; 0xc98 <__stack+0x439>
     ca0:	00 c0       	rjmp	.+0      	; 0xca2 <__stack+0x443>
     ca2:	00 00       	nop
			_delay_ms(1000);
			LCD_cmd(0xD4);
     ca4:	84 ed       	ldi	r24, 0xD4	; 212
     ca6:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("...................");
     caa:	86 e6       	ldi	r24, 0x66	; 102
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
			LCD_cmd(0xD4);
     cb2:	84 ed       	ldi	r24, 0xD4	; 212
     cb4:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("    You lost...........");
     cb8:	8a e6       	ldi	r24, 0x6A	; 106
     cba:	91 e0       	ldi	r25, 0x01	; 1
     cbc:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
			
			LCD_cmd(0x80);
     cc0:	80 e8       	ldi	r24, 0x80	; 128
     cc2:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("    Bad Luck...........");
     cc6:	82 e8       	ldi	r24, 0x82	; 130
     cc8:	91 e0       	ldi	r25, 0x01	; 1
     cca:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
			LCD_cmd(0xc0);
     cce:	80 ec       	ldi	r24, 0xC0	; 192
     cd0:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("new Match in 5s.....");
     cd4:	8c ef       	ldi	r24, 0xFC	; 252
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
			LCD_cmd(0x94);
     cdc:	84 e9       	ldi	r24, 0x94	; 148
     cde:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("...............");
     ce2:	84 ed       	ldi	r24, 0xD4	; 212
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
     cea:	0f e3       	ldi	r16, 0x3F	; 63
     cec:	12 e4       	ldi	r17, 0x42	; 66
     cee:	2f e0       	ldi	r18, 0x0F	; 15
     cf0:	01 50       	subi	r16, 0x01	; 1
     cf2:	10 40       	sbci	r17, 0x00	; 0
     cf4:	20 40       	sbci	r18, 0x00	; 0
     cf6:	e1 f7       	brne	.-8      	; 0xcf0 <__stack+0x491>
     cf8:	00 c0       	rjmp	.+0      	; 0xcfa <__stack+0x49b>
     cfa:	00 00       	nop
			_delay_ms(5000);
			LCD_cmd(0x80);
     cfc:	80 e8       	ldi	r24, 0x80	; 128
     cfe:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("                        ");
     d02:	81 e1       	ldi	r24, 0x11	; 17
     d04:	91 e0       	ldi	r25, 0x01	; 1
     d06:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
			LCD_cmd(0xc0);
     d0a:	80 ec       	ldi	r24, 0xC0	; 192
     d0c:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("                        ");
     d10:	81 e1       	ldi	r24, 0x11	; 17
     d12:	91 e0       	ldi	r25, 0x01	; 1
     d14:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
			init();
     d18:	0e 94 fd 02 	call	0x5fa	; 0x5fa <init>
     d1c:	1e c3       	rjmp	.+1596   	; 0x135a <__stack+0xafb>
		}
		else if(r1==50 || r2==50 || r3==50 || c1==50 || c2==50 || c3==50 || dig1==50 || dig2==50)
     d1e:	8b 81       	ldd	r24, Y+3	; 0x03
     d20:	9c 81       	ldd	r25, Y+4	; 0x04
     d22:	c2 97       	sbiw	r24, 0x32	; 50
     d24:	11 f1       	breq	.+68     	; 0xd6a <__stack+0x50b>
     d26:	92 e3       	ldi	r25, 0x32	; 50
     d28:	a9 16       	cp	r10, r25
     d2a:	b1 04       	cpc	r11, r1
     d2c:	a1 f1       	breq	.+104    	; 0xd96 <__stack+0x537>
     d2e:	a2 e3       	ldi	r26, 0x32	; 50
     d30:	6a 16       	cp	r6, r26
     d32:	71 04       	cpc	r7, r1
     d34:	09 f4       	brne	.+2      	; 0xd38 <__stack+0x4d9>
     d36:	47 c0       	rjmp	.+142    	; 0xdc6 <__stack+0x567>
     d38:	b2 e3       	ldi	r27, 0x32	; 50
     d3a:	4b 16       	cp	r4, r27
     d3c:	51 04       	cpc	r5, r1
     d3e:	09 f4       	brne	.+2      	; 0xd42 <__stack+0x4e3>
     d40:	5a c0       	rjmp	.+180    	; 0xdf6 <__stack+0x597>
     d42:	e2 e3       	ldi	r30, 0x32	; 50
     d44:	ce 16       	cp	r12, r30
     d46:	d1 04       	cpc	r13, r1
     d48:	09 f4       	brne	.+2      	; 0xd4c <__stack+0x4ed>
     d4a:	6c c0       	rjmp	.+216    	; 0xe24 <__stack+0x5c5>
     d4c:	f2 e3       	ldi	r31, 0x32	; 50
     d4e:	8f 16       	cp	r8, r31
     d50:	91 04       	cpc	r9, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <__stack+0x4f7>
     d54:	80 c0       	rjmp	.+256    	; 0xe56 <__stack+0x5f7>
     d56:	22 e3       	ldi	r18, 0x32	; 50
     d58:	22 16       	cp	r2, r18
     d5a:	31 04       	cpc	r3, r1
     d5c:	09 f4       	brne	.+2      	; 0xd60 <__stack+0x501>
     d5e:	94 c0       	rjmp	.+296    	; 0xe88 <__stack+0x629>
     d60:	02 33       	cpi	r16, 0x32	; 50
     d62:	11 05       	cpc	r17, r1
     d64:	09 f0       	breq	.+2      	; 0xd68 <__stack+0x509>
     d66:	00 c1       	rjmp	.+512    	; 0xf68 <__stack+0x709>
     d68:	bf c0       	rjmp	.+382    	; 0xee8 <__stack+0x689>
     d6a:	e1 ee       	ldi	r30, 0xE1	; 225
     d6c:	f1 e0       	ldi	r31, 0x01	; 1
     d6e:	a6 ed       	ldi	r26, 0xD6	; 214
     d70:	b1 e0       	ldi	r27, 0x01	; 1
     d72:	27 ee       	ldi	r18, 0xE7	; 231
     d74:	31 e0       	ldi	r19, 0x01	; 1
			{
				for(int i=0;i<3;i++)
				{
					if(arr2[0][i]==2)
					{
						arr2[0][i]=3;
     d76:	63 e0       	ldi	r22, 0x03	; 3
     d78:	70 e0       	ldi	r23, 0x00	; 0
						arr1[0][i]='0';
     d7a:	40 e3       	ldi	r20, 0x30	; 48
		{
			if(r1==50)
			{
				for(int i=0;i<3;i++)
				{
					if(arr2[0][i]==2)
     d7c:	80 81       	ld	r24, Z
     d7e:	91 81       	ldd	r25, Z+1	; 0x01
     d80:	02 97       	sbiw	r24, 0x02	; 2
     d82:	19 f4       	brne	.+6      	; 0xd8a <__stack+0x52b>
					{
						arr2[0][i]=3;
     d84:	71 83       	std	Z+1, r23	; 0x01
     d86:	60 83       	st	Z, r22
						arr1[0][i]='0';
     d88:	4c 93       	st	X, r20
     d8a:	32 96       	adiw	r30, 0x02	; 2
     d8c:	11 96       	adiw	r26, 0x01	; 1
		}
		else if(r1==50 || r2==50 || r3==50 || c1==50 || c2==50 || c3==50 || dig1==50 || dig2==50)
		{
			if(r1==50)
			{
				for(int i=0;i<3;i++)
     d8e:	e2 17       	cp	r30, r18
     d90:	f3 07       	cpc	r31, r19
     d92:	a1 f7       	brne	.-24     	; 0xd7c <__stack+0x51d>
     d94:	d8 c0       	rjmp	.+432    	; 0xf46 <__stack+0x6e7>
     d96:	e1 ee       	ldi	r30, 0xE1	; 225
     d98:	f1 e0       	ldi	r31, 0x01	; 1
     d9a:	a6 ed       	ldi	r26, 0xD6	; 214
     d9c:	b1 e0       	ldi	r27, 0x01	; 1
     d9e:	27 ee       	ldi	r18, 0xE7	; 231
     da0:	31 e0       	ldi	r19, 0x01	; 1
			{
				for(int i=0;i<3;i++)
				{
					if(arr2[1][i]==2)
					{
						arr2[1][i]=3;
     da2:	63 e0       	ldi	r22, 0x03	; 3
     da4:	70 e0       	ldi	r23, 0x00	; 0
						arr1[1][i]='0';
     da6:	40 e3       	ldi	r20, 0x30	; 48
			}
			else if(r2==50)
			{
				for(int i=0;i<3;i++)
				{
					if(arr2[1][i]==2)
     da8:	86 81       	ldd	r24, Z+6	; 0x06
     daa:	97 81       	ldd	r25, Z+7	; 0x07
     dac:	02 97       	sbiw	r24, 0x02	; 2
     dae:	29 f4       	brne	.+10     	; 0xdba <__stack+0x55b>
					{
						arr2[1][i]=3;
     db0:	77 83       	std	Z+7, r23	; 0x07
     db2:	66 83       	std	Z+6, r22	; 0x06
						arr1[1][i]='0';
     db4:	13 96       	adiw	r26, 0x03	; 3
     db6:	4c 93       	st	X, r20
     db8:	13 97       	sbiw	r26, 0x03	; 3
     dba:	32 96       	adiw	r30, 0x02	; 2
     dbc:	11 96       	adiw	r26, 0x01	; 1
					}
				}
			}
			else if(r2==50)
			{
				for(int i=0;i<3;i++)
     dbe:	e2 17       	cp	r30, r18
     dc0:	f3 07       	cpc	r31, r19
     dc2:	91 f7       	brne	.-28     	; 0xda8 <__stack+0x549>
     dc4:	c0 c0       	rjmp	.+384    	; 0xf46 <__stack+0x6e7>
     dc6:	e1 ee       	ldi	r30, 0xE1	; 225
     dc8:	f1 e0       	ldi	r31, 0x01	; 1
     dca:	a6 ed       	ldi	r26, 0xD6	; 214
     dcc:	b1 e0       	ldi	r27, 0x01	; 1
     dce:	27 ee       	ldi	r18, 0xE7	; 231
     dd0:	31 e0       	ldi	r19, 0x01	; 1
			{
				for(int i=0;i<3;i++)
				{
					if(arr2[2][i]==2)
					{
						arr2[2][i]=3;
     dd2:	63 e0       	ldi	r22, 0x03	; 3
     dd4:	70 e0       	ldi	r23, 0x00	; 0
						arr1[2][i]='0';
     dd6:	40 e3       	ldi	r20, 0x30	; 48
			}
			else if(r3==50)
			{
				for(int i=0;i<3;i++)
				{
					if(arr2[2][i]==2)
     dd8:	84 85       	ldd	r24, Z+12	; 0x0c
     dda:	95 85       	ldd	r25, Z+13	; 0x0d
     ddc:	02 97       	sbiw	r24, 0x02	; 2
     dde:	29 f4       	brne	.+10     	; 0xdea <__stack+0x58b>
					{
						arr2[2][i]=3;
     de0:	75 87       	std	Z+13, r23	; 0x0d
     de2:	64 87       	std	Z+12, r22	; 0x0c
						arr1[2][i]='0';
     de4:	16 96       	adiw	r26, 0x06	; 6
     de6:	4c 93       	st	X, r20
     de8:	16 97       	sbiw	r26, 0x06	; 6
     dea:	32 96       	adiw	r30, 0x02	; 2
     dec:	11 96       	adiw	r26, 0x01	; 1
					}
				}
			}
			else if(r3==50)
			{
				for(int i=0;i<3;i++)
     dee:	e2 17       	cp	r30, r18
     df0:	f3 07       	cpc	r31, r19
     df2:	91 f7       	brne	.-28     	; 0xdd8 <__stack+0x579>
     df4:	a8 c0       	rjmp	.+336    	; 0xf46 <__stack+0x6e7>
     df6:	e1 ee       	ldi	r30, 0xE1	; 225
     df8:	f1 e0       	ldi	r31, 0x01	; 1
     dfa:	a6 ed       	ldi	r26, 0xD6	; 214
     dfc:	b1 e0       	ldi	r27, 0x01	; 1
     dfe:	43 ef       	ldi	r20, 0xF3	; 243
     e00:	51 e0       	ldi	r21, 0x01	; 1
			{
				for(int i=0;i<3;i++)
				{
					if(arr2[i][0]==2)
					{
						arr2[i][0]=3;
     e02:	23 e0       	ldi	r18, 0x03	; 3
     e04:	30 e0       	ldi	r19, 0x00	; 0
						arr1[i][0]='0';
     e06:	80 e3       	ldi	r24, 0x30	; 48
			}
			else if(c1==50)
			{
				for(int i=0;i<3;i++)
				{
					if(arr2[i][0]==2)
     e08:	60 81       	ld	r22, Z
     e0a:	71 81       	ldd	r23, Z+1	; 0x01
     e0c:	62 30       	cpi	r22, 0x02	; 2
     e0e:	71 05       	cpc	r23, r1
     e10:	19 f4       	brne	.+6      	; 0xe18 <__stack+0x5b9>
					{
						arr2[i][0]=3;
     e12:	31 83       	std	Z+1, r19	; 0x01
     e14:	20 83       	st	Z, r18
						arr1[i][0]='0';
     e16:	8c 93       	st	X, r24
     e18:	36 96       	adiw	r30, 0x06	; 6
     e1a:	13 96       	adiw	r26, 0x03	; 3
					}
				}
			}
			else if(c1==50)
			{
				for(int i=0;i<3;i++)
     e1c:	e4 17       	cp	r30, r20
     e1e:	f5 07       	cpc	r31, r21
     e20:	99 f7       	brne	.-26     	; 0xe08 <__stack+0x5a9>
     e22:	91 c0       	rjmp	.+290    	; 0xf46 <__stack+0x6e7>
     e24:	e1 ee       	ldi	r30, 0xE1	; 225
     e26:	f1 e0       	ldi	r31, 0x01	; 1
     e28:	a6 ed       	ldi	r26, 0xD6	; 214
     e2a:	b1 e0       	ldi	r27, 0x01	; 1
     e2c:	43 ef       	ldi	r20, 0xF3	; 243
     e2e:	51 e0       	ldi	r21, 0x01	; 1
			{
				for(int i=0;i<3;i++)
				{
					if(arr2[i][1]==2)
					{
						arr2[i][1]=3;
     e30:	23 e0       	ldi	r18, 0x03	; 3
     e32:	30 e0       	ldi	r19, 0x00	; 0
						arr1[i][1]='0';
     e34:	80 e3       	ldi	r24, 0x30	; 48
			}
			else if(c2==50)
			{
				for(int i=0;i<3;i++)
				{
					if(arr2[i][1]==2)
     e36:	62 81       	ldd	r22, Z+2	; 0x02
     e38:	73 81       	ldd	r23, Z+3	; 0x03
     e3a:	62 30       	cpi	r22, 0x02	; 2
     e3c:	71 05       	cpc	r23, r1
     e3e:	29 f4       	brne	.+10     	; 0xe4a <__stack+0x5eb>
					{
						arr2[i][1]=3;
     e40:	33 83       	std	Z+3, r19	; 0x03
     e42:	22 83       	std	Z+2, r18	; 0x02
						arr1[i][1]='0';
     e44:	11 96       	adiw	r26, 0x01	; 1
     e46:	8c 93       	st	X, r24
     e48:	11 97       	sbiw	r26, 0x01	; 1
     e4a:	36 96       	adiw	r30, 0x06	; 6
     e4c:	13 96       	adiw	r26, 0x03	; 3
					}
				}
			}
			else if(c2==50)
			{
				for(int i=0;i<3;i++)
     e4e:	e4 17       	cp	r30, r20
     e50:	f5 07       	cpc	r31, r21
     e52:	89 f7       	brne	.-30     	; 0xe36 <__stack+0x5d7>
     e54:	78 c0       	rjmp	.+240    	; 0xf46 <__stack+0x6e7>
     e56:	e1 ee       	ldi	r30, 0xE1	; 225
     e58:	f1 e0       	ldi	r31, 0x01	; 1
     e5a:	a6 ed       	ldi	r26, 0xD6	; 214
     e5c:	b1 e0       	ldi	r27, 0x01	; 1
     e5e:	43 ef       	ldi	r20, 0xF3	; 243
     e60:	51 e0       	ldi	r21, 0x01	; 1
			{
				for(int i=0;i<3;i++)
				{
					if(arr2[i][2]==2)
					{
						arr2[i][2]=3;
     e62:	23 e0       	ldi	r18, 0x03	; 3
     e64:	30 e0       	ldi	r19, 0x00	; 0
						arr1[i][2]='0';
     e66:	80 e3       	ldi	r24, 0x30	; 48
			}
			else if(c3==50)
			{
				for(int i=0;i<3;i++)
				{
					if(arr2[i][2]==2)
     e68:	64 81       	ldd	r22, Z+4	; 0x04
     e6a:	75 81       	ldd	r23, Z+5	; 0x05
     e6c:	62 30       	cpi	r22, 0x02	; 2
     e6e:	71 05       	cpc	r23, r1
     e70:	29 f4       	brne	.+10     	; 0xe7c <__stack+0x61d>
					{
						arr2[i][2]=3;
     e72:	35 83       	std	Z+5, r19	; 0x05
     e74:	24 83       	std	Z+4, r18	; 0x04
						arr1[i][2]='0';
     e76:	12 96       	adiw	r26, 0x02	; 2
     e78:	8c 93       	st	X, r24
     e7a:	12 97       	sbiw	r26, 0x02	; 2
     e7c:	36 96       	adiw	r30, 0x06	; 6
     e7e:	13 96       	adiw	r26, 0x03	; 3
					}
				}
			}
			else if(c3==50)
			{
				for(int i=0;i<3;i++)
     e80:	e4 17       	cp	r30, r20
     e82:	f5 07       	cpc	r31, r21
     e84:	89 f7       	brne	.-30     	; 0xe68 <__stack+0x609>
     e86:	5f c0       	rjmp	.+190    	; 0xf46 <__stack+0x6e7>
					}
				}
			}
			else if(dig1==50)
			{
				if(arr2[0][0]==2)
     e88:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <arr2>
     e8c:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <arr2+0x1>
     e90:	02 97       	sbiw	r24, 0x02	; 2
     e92:	51 f4       	brne	.+20     	; 0xea8 <__stack+0x649>
				{
					arr2[0][0]=3;
     e94:	83 e0       	ldi	r24, 0x03	; 3
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <arr2+0x1>
     e9c:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <arr2>
					arr1[0][0]='0';
     ea0:	80 e3       	ldi	r24, 0x30	; 48
     ea2:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <arr1>
     ea6:	4f c0       	rjmp	.+158    	; 0xf46 <__stack+0x6e7>
				}
				else if(arr2[1][1]==2)
     ea8:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <arr2+0x8>
     eac:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <arr2+0x9>
     eb0:	02 97       	sbiw	r24, 0x02	; 2
     eb2:	51 f4       	brne	.+20     	; 0xec8 <__stack+0x669>
				{
					arr2[1][1]=3;
     eb4:	83 e0       	ldi	r24, 0x03	; 3
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <arr2+0x9>
     ebc:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <arr2+0x8>
					arr1[1][1]='0';
     ec0:	80 e3       	ldi	r24, 0x30	; 48
     ec2:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <arr1+0x4>
     ec6:	3f c0       	rjmp	.+126    	; 0xf46 <__stack+0x6e7>
				}
				else if(arr2[2][2]==2)
     ec8:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <arr2+0x10>
     ecc:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <arr2+0x11>
     ed0:	02 97       	sbiw	r24, 0x02	; 2
     ed2:	c9 f5       	brne	.+114    	; 0xf46 <__stack+0x6e7>
				{
					arr2[2][2]=3;
     ed4:	83 e0       	ldi	r24, 0x03	; 3
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <arr2+0x11>
     edc:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <arr2+0x10>
					arr1[2][2]='0';
     ee0:	80 e3       	ldi	r24, 0x30	; 48
     ee2:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <arr1+0x8>
     ee6:	2f c0       	rjmp	.+94     	; 0xf46 <__stack+0x6e7>
				}
			}
			else if(dig2==50)
			{
				if(arr2[0][2]==2)
     ee8:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <arr2+0x4>
     eec:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <arr2+0x5>
     ef0:	02 97       	sbiw	r24, 0x02	; 2
     ef2:	51 f4       	brne	.+20     	; 0xf08 <__stack+0x6a9>
				{
					arr2[0][2]=3;
     ef4:	83 e0       	ldi	r24, 0x03	; 3
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <arr2+0x5>
     efc:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <arr2+0x4>
					arr1[0][2]='0';
     f00:	80 e3       	ldi	r24, 0x30	; 48
     f02:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <arr1+0x2>
     f06:	1f c0       	rjmp	.+62     	; 0xf46 <__stack+0x6e7>
				}
				else if(arr2[1][1]==2)
     f08:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <arr2+0x8>
     f0c:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <arr2+0x9>
     f10:	02 97       	sbiw	r24, 0x02	; 2
     f12:	51 f4       	brne	.+20     	; 0xf28 <__stack+0x6c9>
				{
					arr2[1][1]=3;
     f14:	83 e0       	ldi	r24, 0x03	; 3
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <arr2+0x9>
     f1c:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <arr2+0x8>
					arr1[1][1]='0';
     f20:	80 e3       	ldi	r24, 0x30	; 48
     f22:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <arr1+0x4>
     f26:	0f c0       	rjmp	.+30     	; 0xf46 <__stack+0x6e7>
				}
				else if(arr2[2][0]==2)
     f28:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <arr2+0xc>
     f2c:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <arr2+0xd>
     f30:	02 97       	sbiw	r24, 0x02	; 2
     f32:	49 f4       	brne	.+18     	; 0xf46 <__stack+0x6e7>
				{
					arr2[2][0]=3;
     f34:	83 e0       	ldi	r24, 0x03	; 3
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <arr2+0xd>
     f3c:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <arr2+0xc>
					arr1[2][0]='0';
     f40:	80 e3       	ldi	r24, 0x30	; 48
     f42:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <arr1+0x6>
				}
			}
			printData();
     f46:	0e 94 b3 00 	call	0x166	; 0x166 <printData>
			LCD_cmd(0xD4);
     f4a:	84 ed       	ldi	r24, 0xD4	; 212
     f4c:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("...................");
     f50:	86 e6       	ldi	r24, 0x66	; 102
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
			LCD_cmd(0xD4);
     f58:	84 ed       	ldi	r24, 0xD4	; 212
     f5a:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("YOUR TURN..........");
     f5e:	8a e9       	ldi	r24, 0x9A	; 154
     f60:	91 e0       	ldi	r25, 0x01	; 1
     f62:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
     f66:	f9 c1       	rjmp	.+1010   	; 0x135a <__stack+0xafb>
		}
		else if(mode=='#' && (r1==12 || r2==12 || r3==12 || c1==12 || c2==12 || c3==12 || dig1==12 || dig2==12))
     f68:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     f6c:	83 32       	cpi	r24, 0x23	; 35
     f6e:	01 f5       	brne	.+64     	; 0xfb0 <__stack+0x751>
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	9c 81       	ldd	r25, Y+4	; 0x04
     f74:	0c 97       	sbiw	r24, 0x0c	; 12
     f76:	a9 f1       	breq	.+106    	; 0xfe2 <__stack+0x783>
     f78:	9c e0       	ldi	r25, 0x0C	; 12
     f7a:	a9 16       	cp	r10, r25
     f7c:	b1 04       	cpc	r11, r1
     f7e:	89 f1       	breq	.+98     	; 0xfe2 <__stack+0x783>
     f80:	ac e0       	ldi	r26, 0x0C	; 12
     f82:	6a 16       	cp	r6, r26
     f84:	71 04       	cpc	r7, r1
     f86:	69 f1       	breq	.+90     	; 0xfe2 <__stack+0x783>
     f88:	bc e0       	ldi	r27, 0x0C	; 12
     f8a:	4b 16       	cp	r4, r27
     f8c:	51 04       	cpc	r5, r1
     f8e:	49 f1       	breq	.+82     	; 0xfe2 <__stack+0x783>
     f90:	ec e0       	ldi	r30, 0x0C	; 12
     f92:	ce 16       	cp	r12, r30
     f94:	d1 04       	cpc	r13, r1
     f96:	29 f1       	breq	.+74     	; 0xfe2 <__stack+0x783>
     f98:	fc e0       	ldi	r31, 0x0C	; 12
     f9a:	8f 16       	cp	r8, r31
     f9c:	91 04       	cpc	r9, r1
     f9e:	09 f1       	breq	.+66     	; 0xfe2 <__stack+0x783>
     fa0:	2c e0       	ldi	r18, 0x0C	; 12
     fa2:	22 16       	cp	r2, r18
     fa4:	31 04       	cpc	r3, r1
     fa6:	09 f1       	breq	.+66     	; 0xfea <__stack+0x78b>
     fa8:	0c 30       	cpi	r16, 0x0C	; 12
     faa:	11 05       	cpc	r17, r1
     fac:	09 f4       	brne	.+2      	; 0xfb0 <__stack+0x751>
     fae:	51 c0       	rjmp	.+162    	; 0x1052 <__stack+0x7f3>
     fb0:	41 ee       	ldi	r20, 0xE1	; 225
     fb2:	51 e0       	ldi	r21, 0x01	; 1
     fb4:	66 ed       	ldi	r22, 0xD6	; 214
     fb6:	71 e0       	ldi	r23, 0x01	; 1
     fb8:	0f 2e       	mov	r0, r31
     fba:	f3 ef       	ldi	r31, 0xF3	; 243
     fbc:	cf 2e       	mov	r12, r31
     fbe:	f1 e0       	ldi	r31, 0x01	; 1
     fc0:	df 2e       	mov	r13, r31
     fc2:	f0 2d       	mov	r31, r0
			{
				for(int j=0;j<3;j++)
				{
					if(arr2[i][j]==2 && flag==0)
					{
						flag=1;
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	30 e0       	ldi	r19, 0x00	; 0
						arr2[i][j]=3;
     fc8:	0f 2e       	mov	r0, r31
     fca:	f3 e0       	ldi	r31, 0x03	; 3
     fcc:	ef 2e       	mov	r14, r31
     fce:	f1 2c       	mov	r15, r1
     fd0:	f0 2d       	mov	r31, r0
						arr1[i][j]='0';
     fd2:	0f 2e       	mov	r0, r31
     fd4:	f0 e3       	ldi	r31, 0x30	; 48
     fd6:	9f 2e       	mov	r9, r31
     fd8:	f0 2d       	mov	r31, r0
			{
				for(int j=0;j<3;j++)
				{
					if(arr2[i][j]==2 && flag==0)
					{
						flag=1;
     fda:	aa 24       	eor	r10, r10
     fdc:	a3 94       	inc	r10
     fde:	b1 2c       	mov	r11, r1
     fe0:	b3 c1       	rjmp	.+870    	; 0x1348 <__stack+0xae9>
			LCD_cmd(0xD4);
			LCD_write_string("YOUR TURN..........");
		}
		else if(mode=='#' && (r1==12 || r2==12 || r3==12 || c1==12 || c2==12 || c3==12 || dig1==12 || dig2==12))
		{
			if(dig1==12)
     fe2:	6c e0       	ldi	r22, 0x0C	; 12
     fe4:	26 16       	cp	r2, r22
     fe6:	31 04       	cpc	r3, r1
     fe8:	89 f5       	brne	.+98     	; 0x104c <__stack+0x7ed>
			{
				if(arr2[0][0]==2)
     fea:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <arr2>
     fee:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <arr2+0x1>
     ff2:	02 97       	sbiw	r24, 0x02	; 2
     ff4:	51 f4       	brne	.+20     	; 0x100a <__stack+0x7ab>
				{
					arr2[0][0]=3;
     ff6:	83 e0       	ldi	r24, 0x03	; 3
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <arr2+0x1>
     ffe:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <arr2>
					arr1[0][0]='0';
    1002:	80 e3       	ldi	r24, 0x30	; 48
    1004:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <arr1>
    1008:	a8 c1       	rjmp	.+848    	; 0x135a <__stack+0xafb>
				}
				else if(arr2[1][1]==2)
    100a:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <arr2+0x8>
    100e:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <arr2+0x9>
    1012:	02 97       	sbiw	r24, 0x02	; 2
    1014:	51 f4       	brne	.+20     	; 0x102a <__stack+0x7cb>
				{
					arr2[1][1]=3;
    1016:	83 e0       	ldi	r24, 0x03	; 3
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <arr2+0x9>
    101e:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <arr2+0x8>
					arr1[1][1]='0';
    1022:	80 e3       	ldi	r24, 0x30	; 48
    1024:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <arr1+0x4>
    1028:	98 c1       	rjmp	.+816    	; 0x135a <__stack+0xafb>
				}
				else if(arr2[2][2]==2)
    102a:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <arr2+0x10>
    102e:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <arr2+0x11>
    1032:	02 97       	sbiw	r24, 0x02	; 2
    1034:	09 f0       	breq	.+2      	; 0x1038 <__stack+0x7d9>
    1036:	91 c1       	rjmp	.+802    	; 0x135a <__stack+0xafb>
				{
					arr2[2][2]=3;
    1038:	83 e0       	ldi	r24, 0x03	; 3
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <arr2+0x11>
    1040:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <arr2+0x10>
					arr1[2][2]='0';
    1044:	80 e3       	ldi	r24, 0x30	; 48
    1046:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <arr1+0x8>
    104a:	87 c1       	rjmp	.+782    	; 0x135a <__stack+0xafb>
				}
			}
			else if(dig2==12)
    104c:	0c 30       	cpi	r16, 0x0C	; 12
    104e:	11 05       	cpc	r17, r1
    1050:	89 f5       	brne	.+98     	; 0x10b4 <__stack+0x855>
			{
				if(arr2[0][2]==2)
    1052:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <arr2+0x4>
    1056:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <arr2+0x5>
    105a:	02 97       	sbiw	r24, 0x02	; 2
    105c:	51 f4       	brne	.+20     	; 0x1072 <__stack+0x813>
				{
					arr2[0][2]=3;
    105e:	83 e0       	ldi	r24, 0x03	; 3
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <arr2+0x5>
    1066:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <arr2+0x4>
					arr1[0][2]='0';
    106a:	80 e3       	ldi	r24, 0x30	; 48
    106c:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <arr1+0x2>
    1070:	74 c1       	rjmp	.+744    	; 0x135a <__stack+0xafb>
				}
				else if(arr2[1][1]==2)
    1072:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <arr2+0x8>
    1076:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <arr2+0x9>
    107a:	02 97       	sbiw	r24, 0x02	; 2
    107c:	51 f4       	brne	.+20     	; 0x1092 <__stack+0x833>
				{
					arr2[1][1]=3;
    107e:	83 e0       	ldi	r24, 0x03	; 3
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <arr2+0x9>
    1086:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <arr2+0x8>
					arr1[1][1]='0';
    108a:	80 e3       	ldi	r24, 0x30	; 48
    108c:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <arr1+0x4>
    1090:	64 c1       	rjmp	.+712    	; 0x135a <__stack+0xafb>
				}
				else if(arr2[2][0]==2)
    1092:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <arr2+0xc>
    1096:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <arr2+0xd>
    109a:	02 97       	sbiw	r24, 0x02	; 2
    109c:	09 f0       	breq	.+2      	; 0x10a0 <__stack+0x841>
    109e:	5d c1       	rjmp	.+698    	; 0x135a <__stack+0xafb>
				{
					arr2[2][0]=3;
    10a0:	83 e0       	ldi	r24, 0x03	; 3
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <arr2+0xd>
    10a8:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <arr2+0xc>
					arr1[2][0]='0';
    10ac:	80 e3       	ldi	r24, 0x30	; 48
    10ae:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <arr1+0x6>
    10b2:	53 c1       	rjmp	.+678    	; 0x135a <__stack+0xafb>
				}
			}
			else if(r1==12)
    10b4:	0b 81       	ldd	r16, Y+3	; 0x03
    10b6:	1c 81       	ldd	r17, Y+4	; 0x04
    10b8:	0c 30       	cpi	r16, 0x0C	; 12
    10ba:	11 05       	cpc	r17, r1
    10bc:	51 f5       	brne	.+84     	; 0x1112 <__stack+0x8b3>
			{
				for(int i=0;i<3;i++)
				{
					if(arr2[0][i]==2)
    10be:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <arr2>
    10c2:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <arr2+0x1>
    10c6:	02 97       	sbiw	r24, 0x02	; 2
    10c8:	81 f0       	breq	.+32     	; 0x10ea <__stack+0x88b>
    10ca:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <arr2+0x2>
    10ce:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <arr2+0x3>
    10d2:	02 97       	sbiw	r24, 0x02	; 2
    10d4:	69 f0       	breq	.+26     	; 0x10f0 <__stack+0x891>
    10d6:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <arr2+0x4>
    10da:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <arr2+0x5>
    10de:	02 97       	sbiw	r24, 0x02	; 2
    10e0:	09 f0       	breq	.+2      	; 0x10e4 <__stack+0x885>
    10e2:	3b c1       	rjmp	.+630    	; 0x135a <__stack+0xafb>
					arr1[2][0]='0';
				}
			}
			else if(r1==12)
			{
				for(int i=0;i<3;i++)
    10e4:	82 e0       	ldi	r24, 0x02	; 2
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	05 c0       	rjmp	.+10     	; 0x10f4 <__stack+0x895>
				{
					if(arr2[0][i]==2)
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <__stack+0x895>
					arr1[2][0]='0';
				}
			}
			else if(r1==12)
			{
				for(int i=0;i<3;i++)
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	90 e0       	ldi	r25, 0x00	; 0
				{
					if(arr2[0][i]==2)
					{
						arr2[0][i]=3;
    10f4:	fc 01       	movw	r30, r24
    10f6:	ee 0f       	add	r30, r30
    10f8:	ff 1f       	adc	r31, r31
    10fa:	ef 51       	subi	r30, 0x1F	; 31
    10fc:	fe 4f       	sbci	r31, 0xFE	; 254
    10fe:	23 e0       	ldi	r18, 0x03	; 3
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	31 83       	std	Z+1, r19	; 0x01
    1104:	20 83       	st	Z, r18
						arr1[0][i]='0';
    1106:	fc 01       	movw	r30, r24
    1108:	ea 52       	subi	r30, 0x2A	; 42
    110a:	fe 4f       	sbci	r31, 0xFE	; 254
    110c:	20 e3       	ldi	r18, 0x30	; 48
    110e:	20 83       	st	Z, r18
						break;
    1110:	24 c1       	rjmp	.+584    	; 0x135a <__stack+0xafb>
					}
				}
			}
			else if(r2==12)
    1112:	1c e0       	ldi	r17, 0x0C	; 12
    1114:	a1 16       	cp	r10, r17
    1116:	b1 04       	cpc	r11, r1
    1118:	51 f5       	brne	.+84     	; 0x116e <__stack+0x90f>
			{
				for(int i=0;i<3;i++)
				{
					if(arr2[1][i]==2)
    111a:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <arr2+0x6>
    111e:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <arr2+0x7>
    1122:	02 97       	sbiw	r24, 0x02	; 2
    1124:	81 f0       	breq	.+32     	; 0x1146 <__stack+0x8e7>
    1126:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <arr2+0x8>
    112a:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <arr2+0x9>
    112e:	02 97       	sbiw	r24, 0x02	; 2
    1130:	69 f0       	breq	.+26     	; 0x114c <__stack+0x8ed>
    1132:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <arr2+0xa>
    1136:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <arr2+0xb>
    113a:	02 97       	sbiw	r24, 0x02	; 2
    113c:	09 f0       	breq	.+2      	; 0x1140 <__stack+0x8e1>
    113e:	0d c1       	rjmp	.+538    	; 0x135a <__stack+0xafb>
					}
				}
			}
			else if(r2==12)
			{
				for(int i=0;i<3;i++)
    1140:	82 e0       	ldi	r24, 0x02	; 2
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	05 c0       	rjmp	.+10     	; 0x1150 <__stack+0x8f1>
				{
					if(arr2[1][i]==2)
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <__stack+0x8f1>
					}
				}
			}
			else if(r2==12)
			{
				for(int i=0;i<3;i++)
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
				{
					if(arr2[1][i]==2)
					{
						arr2[1][i]=3;
    1150:	fc 01       	movw	r30, r24
    1152:	ee 0f       	add	r30, r30
    1154:	ff 1f       	adc	r31, r31
    1156:	e9 51       	subi	r30, 0x19	; 25
    1158:	fe 4f       	sbci	r31, 0xFE	; 254
    115a:	23 e0       	ldi	r18, 0x03	; 3
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	31 83       	std	Z+1, r19	; 0x01
    1160:	20 83       	st	Z, r18
						arr1[1][i]='0';
    1162:	fc 01       	movw	r30, r24
    1164:	ea 52       	subi	r30, 0x2A	; 42
    1166:	fe 4f       	sbci	r31, 0xFE	; 254
    1168:	20 e3       	ldi	r18, 0x30	; 48
    116a:	23 83       	std	Z+3, r18	; 0x03
						break;
    116c:	f6 c0       	rjmp	.+492    	; 0x135a <__stack+0xafb>
					}
				}
			}
			else if(r3==12)
    116e:	2c e0       	ldi	r18, 0x0C	; 12
    1170:	62 16       	cp	r6, r18
    1172:	71 04       	cpc	r7, r1
    1174:	51 f5       	brne	.+84     	; 0x11ca <__stack+0x96b>
			{
				for(int i=0;i<3;i++)
				{
					if(arr2[2][i]==2)
    1176:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <arr2+0xc>
    117a:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <arr2+0xd>
    117e:	02 97       	sbiw	r24, 0x02	; 2
    1180:	81 f0       	breq	.+32     	; 0x11a2 <__stack+0x943>
    1182:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <arr2+0xe>
    1186:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <arr2+0xf>
    118a:	02 97       	sbiw	r24, 0x02	; 2
    118c:	69 f0       	breq	.+26     	; 0x11a8 <__stack+0x949>
    118e:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <arr2+0x10>
    1192:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <arr2+0x11>
    1196:	02 97       	sbiw	r24, 0x02	; 2
    1198:	09 f0       	breq	.+2      	; 0x119c <__stack+0x93d>
    119a:	df c0       	rjmp	.+446    	; 0x135a <__stack+0xafb>
					}
				}
			}
			else if(r3==12)
			{
				for(int i=0;i<3;i++)
    119c:	82 e0       	ldi	r24, 0x02	; 2
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	05 c0       	rjmp	.+10     	; 0x11ac <__stack+0x94d>
				{
					if(arr2[2][i]==2)
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <__stack+0x94d>
					}
				}
			}
			else if(r3==12)
			{
				for(int i=0;i<3;i++)
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	90 e0       	ldi	r25, 0x00	; 0
				{
					if(arr2[2][i]==2)
					{
						arr2[2][i]=3;
    11ac:	fc 01       	movw	r30, r24
    11ae:	ee 0f       	add	r30, r30
    11b0:	ff 1f       	adc	r31, r31
    11b2:	e3 51       	subi	r30, 0x13	; 19
    11b4:	fe 4f       	sbci	r31, 0xFE	; 254
    11b6:	23 e0       	ldi	r18, 0x03	; 3
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	31 83       	std	Z+1, r19	; 0x01
    11bc:	20 83       	st	Z, r18
						arr1[2][i]='0';
    11be:	fc 01       	movw	r30, r24
    11c0:	ea 52       	subi	r30, 0x2A	; 42
    11c2:	fe 4f       	sbci	r31, 0xFE	; 254
    11c4:	20 e3       	ldi	r18, 0x30	; 48
    11c6:	26 83       	std	Z+6, r18	; 0x06
						break;
    11c8:	c8 c0       	rjmp	.+400    	; 0x135a <__stack+0xafb>
					}
				}
			}
			else if(c1==12)
    11ca:	6c e0       	ldi	r22, 0x0C	; 12
    11cc:	46 16       	cp	r4, r22
    11ce:	51 04       	cpc	r5, r1
    11d0:	91 f5       	brne	.+100    	; 0x1236 <__stack+0x9d7>
			{
				for(int i=0;i<3;i++)
				{
					if(arr2[i][0]==2)
    11d2:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <arr2>
    11d6:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <arr2+0x1>
    11da:	02 97       	sbiw	r24, 0x02	; 2
    11dc:	81 f0       	breq	.+32     	; 0x11fe <__stack+0x99f>
    11de:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <arr2+0x6>
    11e2:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <arr2+0x7>
    11e6:	02 97       	sbiw	r24, 0x02	; 2
    11e8:	69 f0       	breq	.+26     	; 0x1204 <__stack+0x9a5>
    11ea:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <arr2+0xc>
    11ee:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <arr2+0xd>
    11f2:	02 97       	sbiw	r24, 0x02	; 2
    11f4:	09 f0       	breq	.+2      	; 0x11f8 <__stack+0x999>
    11f6:	b1 c0       	rjmp	.+354    	; 0x135a <__stack+0xafb>
					}
				}
			}
			else if(c1==12)
			{
				for(int i=0;i<3;i++)
    11f8:	82 e0       	ldi	r24, 0x02	; 2
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	05 c0       	rjmp	.+10     	; 0x1208 <__stack+0x9a9>
				{
					if(arr2[i][0]==2)
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <__stack+0x9a9>
					}
				}
			}
			else if(c1==12)
			{
				for(int i=0;i<3;i++)
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	90 e0       	ldi	r25, 0x00	; 0
				{
					if(arr2[i][0]==2)
					{
						arr2[i][0]=3;
    1208:	26 e0       	ldi	r18, 0x06	; 6
    120a:	28 9f       	mul	r18, r24
    120c:	f0 01       	movw	r30, r0
    120e:	29 9f       	mul	r18, r25
    1210:	f0 0d       	add	r31, r0
    1212:	11 24       	eor	r1, r1
    1214:	ef 51       	subi	r30, 0x1F	; 31
    1216:	fe 4f       	sbci	r31, 0xFE	; 254
    1218:	23 e0       	ldi	r18, 0x03	; 3
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	31 83       	std	Z+1, r19	; 0x01
    121e:	20 83       	st	Z, r18
						arr1[i][0]='0';
    1220:	fc 01       	movw	r30, r24
    1222:	ee 0f       	add	r30, r30
    1224:	ff 1f       	adc	r31, r31
    1226:	8e 0f       	add	r24, r30
    1228:	9f 1f       	adc	r25, r31
    122a:	fc 01       	movw	r30, r24
    122c:	ea 52       	subi	r30, 0x2A	; 42
    122e:	fe 4f       	sbci	r31, 0xFE	; 254
    1230:	80 e3       	ldi	r24, 0x30	; 48
    1232:	80 83       	st	Z, r24
						break;
    1234:	92 c0       	rjmp	.+292    	; 0x135a <__stack+0xafb>
					}
				}
			}
			else if(c2==12)
    1236:	8c e0       	ldi	r24, 0x0C	; 12
    1238:	c8 16       	cp	r12, r24
    123a:	d1 04       	cpc	r13, r1
    123c:	91 f5       	brne	.+100    	; 0x12a2 <__stack+0xa43>
			{
				for(int i=0;i<3;i++)
				{
					if(arr2[i][1]==2)
    123e:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <arr2+0x2>
    1242:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <arr2+0x3>
    1246:	02 97       	sbiw	r24, 0x02	; 2
    1248:	81 f0       	breq	.+32     	; 0x126a <__stack+0xa0b>
    124a:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <arr2+0x8>
    124e:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <arr2+0x9>
    1252:	02 97       	sbiw	r24, 0x02	; 2
    1254:	69 f0       	breq	.+26     	; 0x1270 <__stack+0xa11>
    1256:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <arr2+0xe>
    125a:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <arr2+0xf>
    125e:	02 97       	sbiw	r24, 0x02	; 2
    1260:	09 f0       	breq	.+2      	; 0x1264 <__stack+0xa05>
    1262:	7b c0       	rjmp	.+246    	; 0x135a <__stack+0xafb>
					}
				}
			}
			else if(c2==12)
			{
				for(int i=0;i<3;i++)
    1264:	82 e0       	ldi	r24, 0x02	; 2
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	05 c0       	rjmp	.+10     	; 0x1274 <__stack+0xa15>
				{
					if(arr2[i][1]==2)
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <__stack+0xa15>
					}
				}
			}
			else if(c2==12)
			{
				for(int i=0;i<3;i++)
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
				{
					if(arr2[i][1]==2)
					{
						arr2[i][1]=3;
    1274:	26 e0       	ldi	r18, 0x06	; 6
    1276:	28 9f       	mul	r18, r24
    1278:	f0 01       	movw	r30, r0
    127a:	29 9f       	mul	r18, r25
    127c:	f0 0d       	add	r31, r0
    127e:	11 24       	eor	r1, r1
    1280:	ef 51       	subi	r30, 0x1F	; 31
    1282:	fe 4f       	sbci	r31, 0xFE	; 254
    1284:	23 e0       	ldi	r18, 0x03	; 3
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	33 83       	std	Z+3, r19	; 0x03
    128a:	22 83       	std	Z+2, r18	; 0x02
						arr1[i][1]='0';
    128c:	fc 01       	movw	r30, r24
    128e:	ee 0f       	add	r30, r30
    1290:	ff 1f       	adc	r31, r31
    1292:	8e 0f       	add	r24, r30
    1294:	9f 1f       	adc	r25, r31
    1296:	fc 01       	movw	r30, r24
    1298:	ea 52       	subi	r30, 0x2A	; 42
    129a:	fe 4f       	sbci	r31, 0xFE	; 254
    129c:	80 e3       	ldi	r24, 0x30	; 48
    129e:	81 83       	std	Z+1, r24	; 0x01
						break;
    12a0:	5c c0       	rjmp	.+184    	; 0x135a <__stack+0xafb>
					}
				}
			}
			else if(c3==12)
    12a2:	9c e0       	ldi	r25, 0x0C	; 12
    12a4:	89 16       	cp	r8, r25
    12a6:	91 04       	cpc	r9, r1
    12a8:	09 f0       	breq	.+2      	; 0x12ac <__stack+0xa4d>
    12aa:	57 c0       	rjmp	.+174    	; 0x135a <__stack+0xafb>
			{
				for(int i=0;i<3;i++)
				{
					if(arr2[i][2]==2)
    12ac:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <arr2+0x4>
    12b0:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <arr2+0x5>
    12b4:	02 97       	sbiw	r24, 0x02	; 2
    12b6:	81 f0       	breq	.+32     	; 0x12d8 <__stack+0xa79>
    12b8:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <arr2+0xa>
    12bc:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <arr2+0xb>
    12c0:	02 97       	sbiw	r24, 0x02	; 2
    12c2:	69 f0       	breq	.+26     	; 0x12de <__stack+0xa7f>
    12c4:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <arr2+0x10>
    12c8:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <arr2+0x11>
    12cc:	02 97       	sbiw	r24, 0x02	; 2
    12ce:	09 f0       	breq	.+2      	; 0x12d2 <__stack+0xa73>
    12d0:	44 c0       	rjmp	.+136    	; 0x135a <__stack+0xafb>
					}
				}
			}
			else if(c3==12)
			{
				for(int i=0;i<3;i++)
    12d2:	82 e0       	ldi	r24, 0x02	; 2
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	05 c0       	rjmp	.+10     	; 0x12e2 <__stack+0xa83>
				{
					if(arr2[i][2]==2)
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <__stack+0xa83>
					}
				}
			}
			else if(c3==12)
			{
				for(int i=0;i<3;i++)
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
				{
					if(arr2[i][2]==2)
					{
						arr2[i][2]=3;
    12e2:	26 e0       	ldi	r18, 0x06	; 6
    12e4:	28 9f       	mul	r18, r24
    12e6:	f0 01       	movw	r30, r0
    12e8:	29 9f       	mul	r18, r25
    12ea:	f0 0d       	add	r31, r0
    12ec:	11 24       	eor	r1, r1
    12ee:	ef 51       	subi	r30, 0x1F	; 31
    12f0:	fe 4f       	sbci	r31, 0xFE	; 254
    12f2:	23 e0       	ldi	r18, 0x03	; 3
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	35 83       	std	Z+5, r19	; 0x05
    12f8:	24 83       	std	Z+4, r18	; 0x04
						arr1[i][2]='0';
    12fa:	fc 01       	movw	r30, r24
    12fc:	ee 0f       	add	r30, r30
    12fe:	ff 1f       	adc	r31, r31
    1300:	8e 0f       	add	r24, r30
    1302:	9f 1f       	adc	r25, r31
    1304:	fc 01       	movw	r30, r24
    1306:	ea 52       	subi	r30, 0x2A	; 42
    1308:	fe 4f       	sbci	r31, 0xFE	; 254
    130a:	80 e3       	ldi	r24, 0x30	; 48
    130c:	82 83       	std	Z+2, r24	; 0x02
						break;
    130e:	25 c0       	rjmp	.+74     	; 0x135a <__stack+0xafb>
			int flag=0;
			for(int i=0;i<3;i++)
			{
				for(int j=0;j<3;j++)
				{
					if(arr2[i][j]==2 && flag==0)
    1310:	a0 81       	ld	r26, Z
    1312:	b1 81       	ldd	r27, Z+1	; 0x01
    1314:	12 97       	sbiw	r26, 0x02	; 2
    1316:	49 f4       	brne	.+18     	; 0x132a <__stack+0xacb>
    1318:	21 15       	cp	r18, r1
    131a:	31 05       	cpc	r19, r1
    131c:	31 f4       	brne	.+12     	; 0x132a <__stack+0xacb>
					{
						flag=1;
						arr2[i][j]=3;
    131e:	f1 82       	std	Z+1, r15	; 0x01
    1320:	e0 82       	st	Z, r14
						arr1[i][j]='0';
    1322:	d2 01       	movw	r26, r4
    1324:	9c 92       	st	X, r9
			{
				for(int j=0;j<3;j++)
				{
					if(arr2[i][j]==2 && flag==0)
					{
						flag=1;
    1326:	2a 2d       	mov	r18, r10
    1328:	3b 2d       	mov	r19, r11
		else
		{
			int flag=0;
			for(int i=0;i<3;i++)
			{
				for(int j=0;j<3;j++)
    132a:	01 96       	adiw	r24, 0x01	; 1
    132c:	32 96       	adiw	r30, 0x02	; 2
    132e:	bf ef       	ldi	r27, 0xFF	; 255
    1330:	4b 1a       	sub	r4, r27
    1332:	5b 0a       	sbc	r5, r27
    1334:	83 30       	cpi	r24, 0x03	; 3
    1336:	91 05       	cpc	r25, r1
    1338:	59 f7       	brne	.-42     	; 0x1310 <__stack+0xab1>
    133a:	4a 5f       	subi	r20, 0xFA	; 250
    133c:	5f 4f       	sbci	r21, 0xFF	; 255
    133e:	6d 5f       	subi	r22, 0xFD	; 253
    1340:	7f 4f       	sbci	r23, 0xFF	; 255
		}
		
		else
		{
			int flag=0;
			for(int i=0;i<3;i++)
    1342:	4c 15       	cp	r20, r12
    1344:	5d 05       	cpc	r21, r13
    1346:	29 f0       	breq	.+10     	; 0x1352 <__stack+0xaf3>
					}
				}
			}
			else if(c3==12)
			{
				for(int i=0;i<3;i++)
    1348:	2b 01       	movw	r4, r22
    134a:	fa 01       	movw	r30, r20
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	df cf       	rjmp	.-66     	; 0x1310 <__stack+0xab1>
						arr1[i][j]='0';
					}
				}
			}
			
			if(flag==0)
    1352:	23 2b       	or	r18, r19
    1354:	11 f4       	brne	.+4      	; 0x135a <__stack+0xafb>
			{
				matchDraw();
    1356:	0e 94 a5 03 	call	0x74a	; 0x74a <matchDraw>
    135a:	41 ee       	ldi	r20, 0xE1	; 225
    135c:	51 e0       	ldi	r21, 0x01	; 1
    135e:	a3 ef       	ldi	r26, 0xF3	; 243
    1360:	b1 e0       	ldi	r27, 0x01	; 1
			}
		}
		int flag2=0;
    1362:	60 e0       	ldi	r22, 0x00	; 0
    1364:	70 e0       	ldi	r23, 0x00	; 0
    1366:	11 c0       	rjmp	.+34     	; 0x138a <__stack+0xb2b>
		for(int i=0;i<3;i++)
		{
			for(int j=0;j<3;j++)
			{
				if(arr2[i][j]==2 && flag2==0)
    1368:	21 91       	ld	r18, Z+
    136a:	31 91       	ld	r19, Z+
    136c:	22 30       	cpi	r18, 0x02	; 2
    136e:	31 05       	cpc	r19, r1
    1370:	29 f4       	brne	.+10     	; 0x137c <__stack+0xb1d>
    1372:	61 15       	cp	r22, r1
    1374:	71 05       	cpc	r23, r1
    1376:	11 f4       	brne	.+4      	; 0x137c <__stack+0xb1d>
				{
					flag2=1;
    1378:	61 e0       	ldi	r22, 0x01	; 1
    137a:	70 e0       	ldi	r23, 0x00	; 0
    137c:	01 97       	sbiw	r24, 0x01	; 1
			}
		}
		int flag2=0;
		for(int i=0;i<3;i++)
		{
			for(int j=0;j<3;j++)
    137e:	a1 f7       	brne	.-24     	; 0x1368 <__stack+0xb09>
    1380:	4a 5f       	subi	r20, 0xFA	; 250
    1382:	5f 4f       	sbci	r21, 0xFF	; 255
			{
				matchDraw();
			}
		}
		int flag2=0;
		for(int i=0;i<3;i++)
    1384:	a4 17       	cp	r26, r20
    1386:	b5 07       	cpc	r27, r21
    1388:	21 f0       	breq	.+8      	; 0x1392 <__stack+0xb33>
			{
				for(int j=0;j<3;j++)
				{
					if(arr2[i][j]==2 && flag==0)
					{
						flag=1;
    138a:	fa 01       	movw	r30, r20
    138c:	83 e0       	ldi	r24, 0x03	; 3
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	eb cf       	rjmp	.-42     	; 0x1368 <__stack+0xb09>
					flag2=1;
				}
			}
		}
		
		if(flag2==0)
    1392:	67 2b       	or	r22, r23
    1394:	19 f4       	brne	.+6      	; 0x139c <__stack+0xb3d>
		{
			matchDraw();
    1396:	0e 94 a5 03 	call	0x74a	; 0x74a <matchDraw>
    139a:	0b c0       	rjmp	.+22     	; 0x13b2 <__stack+0xb53>
		}
		else
		{
			LCD_cmd(0xD4);
    139c:	84 ed       	ldi	r24, 0xD4	; 212
    139e:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
			LCD_write_string("...................");
    13a2:	86 e6       	ldi	r24, 0x66	; 102
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
			LCD_write_string("Done...............");
    13aa:	8e ea       	ldi	r24, 0xAE	; 174
    13ac:	91 e0       	ldi	r25, 0x01	; 1
    13ae:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
		}
	}
}
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	1f 91       	pop	r17
    13c0:	0f 91       	pop	r16
    13c2:	ff 90       	pop	r15
    13c4:	ef 90       	pop	r14
    13c6:	df 90       	pop	r13
    13c8:	cf 90       	pop	r12
    13ca:	bf 90       	pop	r11
    13cc:	af 90       	pop	r10
    13ce:	9f 90       	pop	r9
    13d0:	8f 90       	pop	r8
    13d2:	7f 90       	pop	r7
    13d4:	6f 90       	pop	r6
    13d6:	5f 90       	pop	r5
    13d8:	4f 90       	pop	r4
    13da:	3f 90       	pop	r3
    13dc:	2f 90       	pop	r2
    13de:	08 95       	ret

000013e0 <main>:


int main()
{
	unsigned char value;
	DDRA=0xff;
    13e0:	8f ef       	ldi	r24, 0xFF	; 255
    13e2:	8a bb       	out	0x1a, r24	; 26
	DDRB=0x07;
    13e4:	87 e0       	ldi	r24, 0x07	; 7
    13e6:	87 bb       	out	0x17, r24	; 23
	DDRD=0x0F;
    13e8:	8f e0       	ldi	r24, 0x0F	; 15
    13ea:	81 bb       	out	0x11, r24	; 17
	pad=0xf0;
    13ec:	80 ef       	ldi	r24, 0xF0	; 240
    13ee:	82 bb       	out	0x12, r24	; 18
	init_LCD();
    13f0:	0e 94 6d 00 	call	0xda	; 0xda <init_LCD>
	init();
    13f4:	0e 94 fd 02 	call	0x5fa	; 0x5fa <init>
	while(1)
	{
		PORTD=0xF0;
    13f8:	c0 ef       	ldi	r28, 0xF0	; 240
    13fa:	c2 bb       	out	0x12, r28	; 18
		value=PIND;
    13fc:	80 b3       	in	r24, 0x10	; 16
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13fe:	21 e2       	ldi	r18, 0x21	; 33
    1400:	2a 95       	dec	r18
    1402:	f1 f7       	brne	.-4      	; 0x1400 <main+0x20>
    1404:	00 00       	nop
		
		_delay_us(100);
		if(value!=0xf0)
    1406:	80 3f       	cpi	r24, 0xF0	; 240
    1408:	c1 f3       	breq	.-16     	; 0x13fa <main+0x1a>
		{
			check1();
    140a:	0e 94 08 01 	call	0x210	; 0x210 <check1>
			check2();
    140e:	0e 94 ae 01 	call	0x35c	; 0x35c <check2>
			check3();
    1412:	0e 94 57 02 	call	0x4ae	; 0x4ae <check3>
			check4();
    1416:	0e 94 49 00 	call	0x92	; 0x92 <check4>
			if(change==1)
    141a:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <change>
    141e:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <change+0x1>
    1422:	01 97       	sbiw	r24, 0x01	; 1
    1424:	51 f7       	brne	.-44     	; 0x13fa <main+0x1a>
			{
				change=0;
    1426:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <change+0x1>
    142a:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <change>
				printData();
    142e:	0e 94 b3 00 	call	0x166	; 0x166 <printData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1432:	8f e3       	ldi	r24, 0x3F	; 63
    1434:	9d e0       	ldi	r25, 0x0D	; 13
    1436:	23 e0       	ldi	r18, 0x03	; 3
    1438:	81 50       	subi	r24, 0x01	; 1
    143a:	90 40       	sbci	r25, 0x00	; 0
    143c:	20 40       	sbci	r18, 0x00	; 0
    143e:	e1 f7       	brne	.-8      	; 0x1438 <main+0x58>
    1440:	00 c0       	rjmp	.+0      	; 0x1442 <main+0x62>
    1442:	00 00       	nop
				_delay_ms(1000);
				
				nextStep();
    1444:	0e 94 ed 03 	call	0x7da	; 0x7da <nextStep>
				printData();
    1448:	0e 94 b3 00 	call	0x166	; 0x166 <printData>
    144c:	87 ea       	ldi	r24, 0xA7	; 167
    144e:	91 e6       	ldi	r25, 0x61	; 97
    1450:	01 97       	sbiw	r24, 0x01	; 1
    1452:	f1 f7       	brne	.-4      	; 0x1450 <main+0x70>
    1454:	00 c0       	rjmp	.+0      	; 0x1456 <main+0x76>
    1456:	00 00       	nop
				_delay_ms(100);
				LCD_cmd(0xD4);
    1458:	84 ed       	ldi	r24, 0xD4	; 212
    145a:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
				LCD_write_string("...................");
    145e:	86 e6       	ldi	r24, 0x66	; 102
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
				LCD_cmd(0xD4);
    1466:	84 ed       	ldi	r24, 0xD4	; 212
    1468:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_cmd>
				LCD_write_string("Your Turn.....");
    146c:	82 ec       	ldi	r24, 0xC2	; 194
    146e:	91 e0       	ldi	r25, 0x01	; 1
    1470:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_string>
    1474:	c2 cf       	rjmp	.-124    	; 0x13fa <main+0x1a>

00001476 <_exit>:
    1476:	f8 94       	cli

00001478 <__stop_program>:
    1478:	ff cf       	rjmp	.-2      	; 0x1478 <__stop_program>
